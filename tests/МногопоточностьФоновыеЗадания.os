// BSLLS:MagicNumber-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:DuplicateStringLiteral-off
// BSLLS:LineLength-off

#Использовать ".."
#Использовать "utils"

Перем МенеджерСущностей;
Перем СтрокаСоединенияКоннектора; // Для использования в тестах с пулом соединений

Процедура ПередЗапускомТеста() Экспорт

	ЗапускатьТестыPostgres = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("TESTRUNNER_RUN_POSTGRES_TESTS", "true");
	ЗапускатьТестыSQLite = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("TESTRUNNER_RUN_SQLITE_TESTS", "true");

	ВыполнятьСбросТаблиц = Ложь;
	Если ЗапускатьТестыSQLite = "true" Тогда
		СтрокаСоединения = "FullUri=file::memory:?cache=shared";
		//СтрокаСоединения = "Data Source=test.db";
		ТипКоннектора = Тип("КоннекторSQLite");
	ИначеЕсли ЗапускатьТестыPostgres = "true" Тогда
		Хост = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_HOST", "localhost");
		Порт = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_PORT", "5432");
		Пользователь = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_USERNAME", "postgres");
		Пароль = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_PASSWORD", "postgres");
		ИмяБД = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_DATABASE", "postgres");
		СтрокаСоединения = СтрШаблон(
			"Host=%1;Username=%2;Password=%3;Database=%4;port=%5;",
			Хост,
			Пользователь,
			Пароль,
			ИмяБД,
			Порт
		);
		ТипКоннектора = Тип("КоннекторPostgreSQL");
		ВыполнятьСбросТаблиц = Истина;
	Иначе
		ВызватьИсключение "Нет доступного коннектора для тестирования менеджера сущностей";
	КонецЕсли;
	
	// Сохраняем строку соединения для использования в тестах с пулом
	СтрокаСоединенияКоннектора = СтрокаСоединения;
	
	МенеджерСущностей = Новый МенеджерСущностей(ТипКоннектора, СтрокаСоединения);
	
	Если ВыполнятьСбросТаблиц Тогда
		Коннектор = МенеджерСущностей.ПолучитьКоннектор();
		Коннектор.Открыть(СтрокаСоединения, Новый Массив);
		ТестовыеУтилиты.УдалитьТаблицыВБазеДанных(Коннектор);
		Коннектор.Закрыть();
	КонецЕсли;

	ПодключитьСценарий(
		ОбъединитьПути(
			ТекущийКаталог(), 
			"tests", 
			"fixtures", 
			"Автор.os"
		), 
		"Автор"
	);
	ПодключитьСценарий(
		ОбъединитьПути(
			ТекущийКаталог(), 
			"tests", 
			"fixtures", 
			"СущностьБезГенерируемогоИдентификатора.os"
		), 
		"СущностьБезГенерируемогоИдентификатора"
	);
	ПодключитьСценарий(
		ОбъединитьПути(
			ТекущийКаталог(), 
			"tests", 
			"fixtures", 
			"СущностьСоВсемиТипамиКолонок.os"
		), 
		"СущностьСоВсемиТипамиКолонок"
	);
	
	МенеджерСущностей.ДобавитьКлассВМодель(Тип("СущностьБезГенерируемогоИдентификатора"));
	МенеджерСущностей.ДобавитьКлассВМодель(Тип("Автор"));
	МенеджерСущностей.ДобавитьКлассВМодель(Тип("СущностьСоВсемиТипамиКолонок"));
	
	МенеджерСущностей.Инициализировать();

КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	МенеджерСущностей.Закрыть();
	МенеджерСущностей = Неопределено;
КонецПроцедуры

&Тест
Процедура НезависимыеТранзакцииВРазныхКонтекстах() Экспорт
	// Проверяем, что транзакции в разных контекстах не влияют друг на друга
	
	// Контекст 1 - имитирует основной поток
	МенеджерСущностей.НачатьТранзакцию();
	
	// Сохраняем сущность в основном потоке
	Автор1 = Новый Автор;
	Автор1.Имя = "Первый";
	Автор1.ВтороеИмя = "Автор";
	МенеджерСущностей.Сохранить(Автор1);
	
	// TODO: Для полного тестирования нужно реализовать симуляцию фонового задания
	// Пока проверяем только основной поток
	
	// Фиксируем транзакцию основного потока
	МенеджерСущностей.ЗафиксироватьТранзакцию();
	
	// Проверяем результат - должен остаться автор из основного потока
	Результат = МенеджерСущностей.ПолучитьКоннектор().ВыполнитьЗапрос("SELECT * FROM Авторы");
	Ожидаем.Что(Результат, "Должен остаться автор из основного потока").ИмеетДлину(1);
	Ожидаем.Что(Результат[0].Имя, "Должен остаться автор из основного потока").Равно("Первый");
КонецПроцедуры

&Тест
Процедура МногократныеНезависимыеТранзакции() Экспорт
	// Проверяем работу нескольких независимых транзакций подряд
	
	// Создаем несколько транзакций в основном потоке (в реальности это могли бы быть разные фоновые задания)
	Для Индекс = 1 По 3 Цикл
		МенеджерСущностей.НачатьТранзакцию();
		
		// В каждой транзакции сохраняем автора
		Автор = Новый Автор;
		Автор.Имя = "Автор" + Индекс;
		Автор.ВтороеИмя = "Контекст" + Индекс;
		МенеджерСущностей.Сохранить(Автор);
		
		// Фиксируем транзакцию
		МенеджерСущностей.ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	// Проверяем, что все авторы сохранились
	Результат = МенеджерСущностей.ПолучитьКоннектор().ВыполнитьЗапрос("SELECT * FROM Авторы ORDER BY Имя");
	Ожидаем.Что(Результат, "Должны сохраниться все три автора").ИмеетДлину(3);
	
	Для Индекс = 0 По 2 Цикл
		ОжидаемоеИмя = "Автор" + (Индекс + 1);
		Ожидаем.Что(Результат[Индекс].Имя, "Автор должен быть сохранен корректно").Равно(ОжидаемоеИмя);
	КонецЦикла;
КонецПроцедуры

&Тест
Процедура ОбратнаяСовместимостьБезКонтекстов() Экспорт
	// Проверяем, что старый API без указания контекстов продолжает работать
	
	МенеджерСущностей.НачатьТранзакцию(); // Без возврата КонтекстID
	
	Автор = Новый Автор;
	Автор.Имя = "Старый";
	Автор.ВтороеИмя = "API";
	МенеджерСущностей.Сохранить(Автор); // Без указания контекста
	
	МенеджерСущностей.ЗафиксироватьТранзакцию(); // Без указания контекста
	
	// Проверяем результат
	Результат = МенеджерСущностей.ПолучитьКоннектор().ВыполнитьЗапрос("SELECT * FROM Авторы");
	Ожидаем.Что(Результат, "Автор должен быть сохранен").ИмеетДлину(1);
	Ожидаем.Что(Результат[0].Имя, "Имя автора должно быть корректным").Равно("Старый");
КонецПроцедуры

&Тест
Процедура СмешанноеИспользованиеКонтекстовИБезКонтекстов() Экспорт
	// Проверяем совместимость API с автоматическим определением контекстов
	
	// Транзакция 1
	МенеджерСущностей.НачатьТранзакцию();
	
	Автор1 = Новый Автор;
	Автор1.Имя = "Первый";
	Автор1.ВтороеИмя = "Автор";
	МенеджерСущностей.Сохранить(Автор1);
	
	МенеджерСущностей.ЗафиксироватьТранзакцию();
	
	// Транзакция 2
	МенеджерСущностей.НачатьТранзакцию();
	
	Автор2 = Новый Автор;
	Автор2.Имя = "Второй";
	Автор2.ВтороеИмя = "Автор";
	МенеджерСущностей.Сохранить(Автор2);
	
	МенеджерСущностей.ЗафиксироватьТранзакцию();
	
	// Проверяем результат
	Результат = МенеджерСущностей.ПолучитьКоннектор().ВыполнитьЗапрос("SELECT * FROM Авторы ORDER BY Имя");
	Ожидаем.Что(Результат, "Должны быть сохранены оба автора").ИмеетДлину(2);
	Ожидаем.Что(Результат[0].Имя, "Первый автор").Равно("Второй");
	Ожидаем.Что(Результат[1].Имя, "Второй автор").Равно("Первый");
КонецПроцедуры

&Тест
Процедура СимуляцияФоновогоЗаданияСОшибкой() Экспорт
	// Имитируем ситуацию с транзакциями и откатом
	
	// Основной поток начинает транзакцию
	МенеджерСущностей.НачатьТранзакцию();
	
	Автор1 = Новый Автор;
	Автор1.Имя = "Основной";
	Автор1.ВтороеИмя = "Поток";
	МенеджерСущностей.Сохранить(Автор1);
	
	// Основной поток завершается успешно
	МенеджерСущностей.ЗафиксироватьТранзакцию();
	
	// Симулируем ошибочную транзакцию
	МенеджерСущностей.НачатьТранзакцию();
	
	Автор2 = Новый Автор;
	Автор2.Имя = "Ошибочный";
	Автор2.ВтороеИмя = "Автор";
	МенеджерСущностей.Сохранить(Автор2);
	
	// Симулируем ошибку - откатываем транзакцию
	МенеджерСущностей.ОтменитьТранзакцию();
	
	// Проверяем, что сохранился только автор из первой транзакции
	Результат = МенеджерСущностей.ПолучитьКоннектор().ВыполнитьЗапрос("SELECT * FROM Авторы");
	Ожидаем.Что(Результат, "Должен остаться только автор из первой транзакции").ИмеетДлину(1);
	Ожидаем.Что(Результат[0].Имя, "Должен остаться правильный автор").Равно("Основной");
КонецПроцедуры

// Тест для демонстрации реальной работы с ФоновыеЗадания API  
// Проверяет многопоточную работу менеджера сущностей в режиме фоновых заданий
&Тест
Процедура МногопоточнаяРаботаСФоновымиЗаданиями() Экспорт
	
	// Создаем менеджер с пулом соединений для тестирования
	ТипКоннекторы = ТипЗнч(МенеджерСущностей.ПолучитьКоннектор());
	МенеджерСПулом = Новый МенеджерСущностей(
		ТипКоннекторы, 
		СтрокаСоединенияКоннектора, // Используем сохраненную строку соединения из ПередЗапускомТеста
		Неопределено,
		3 // Пул из 3 соединений
	);
	МенеджерСПулом.ДобавитьКлассВМодель(Тип("Автор"));
	МенеджерСПулом.Инициализировать();
	
	// Начинаем транзакцию в основном потоке
	МенеджерСПулом.НачатьТранзакцию();
	
	Автор1 = Новый Автор;
	Автор1.Имя = "Основной";
	Автор1.ВтороеИмя = "Поток";
	МенеджерСПулом.Сохранить(Автор1);
	
	// Запускаем несколько фоновых заданий параллельно
	МассивЗаданий = Новый Массив;
	
	Для Индекс = 1 По 2 Цикл
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("МенеджерСущностей", МенеджерСПулом);
		ПараметрыЗадания.Вставить("НомерЗадания", Индекс);
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ФоновоеЗаданиеСозданияАвтораСПулом", ПараметрыЗадания);
		МассивЗаданий.Добавить(ФоновоеЗадание);
	КонецЦикла;
	
	// Ждем завершения всех фоновых заданий (максимум 10 секунд)
	ОжидатьЗавершенияВсехЗаданий(МассивЗаданий, 100, 100);
	
	// Фиксируем транзакцию основного потока
	МенеджерСПулом.ЗафиксироватьТранзакцию();
	
	// Проверяем результат
	Результат = МенеджерСПулом.ПолучитьКоннектор().ВыполнитьЗапрос("SELECT * FROM Авторы ORDER BY Имя");
	
	// Подсчитываем успешно завершенные задания
	КоличествоУспешныхЗаданий = 0;
	Для Каждого Задание Из МассивЗаданий Цикл
		Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			КоличествоУспешныхЗаданий = КоличествоУспешныхЗаданий + 1;
		КонецЕсли;
	КонецЦикла;
	
	ОжидаемоеКоличествоАвторов = 1 + КоличествоУспешныхЗаданий; // Основной поток + успешные задания
	Ожидаем.Что(Результат, "Количество авторов должно соответствовать успешно завершенным операциям").ИмеетДлину(ОжидаемоеКоличествоАвторов);
	
	// Проверяем, что автор из основного потока точно есть
	НайденОсновнойАвтор = Ложь;
	Для Каждого Строка Из Результат Цикл
		Если Строка.Имя = "Основной" Тогда
			НайденОсновнойАвтор = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Ожидаем.Что(НайденОсновнойАвтор, "Автор из основного потока должен быть сохранен").ЭтоИстина();
	
	МенеджерСПулом.Закрыть();
КонецПроцедуры

// Ожидать завершения всех переданных фоновых заданий
//
// Параметры:
//   Задания     - Массив       - Массив фоновых заданий (объекты типа ФоновоеЗадание)
//   МаксИтераций - Число        - Максимальное количество итераций ожидания
//   ИнтервалМС  - Число        - Пауза между итерациями в миллисекундах
Процедура ОжидатьЗавершенияВсехЗаданий(Задания, МаксИтераций, ИнтервалМС)
	СчетчикОжидания = 0;
	Пока СчетчикОжидания < МаксИтераций Цикл
		ВсеЗавершены = Истина;
		Для Каждого Задание Из Задания Цикл
			Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				ВсеЗавершены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ВсеЗавершены Тогда
			Прервать;
		КонецЕсли;
		Приостановить(ИнтервалМС);
		СчетчикОжидания = СчетчикОжидания + 1;
	КонецЦикла;
КонецПроцедуры


// Процедура для выполнения в фоновом задании
// Создание автора в отдельной транзакции (используется в тестах фоновых заданий)
// Параметры:
//   ПараметрыЗадания - Структура - Данные для выполнения (МенеджерСущностей, НомерЗадания)
Процедура ФоновоеЗаданиеСозданияАвтора(ПараметрыЗадания) Экспорт
	МенеджерСущностей = ПараметрыЗадания.МенеджерСущностей;
	
	// Начинаем транзакцию в фоновом задании (контекст определяется автоматически)
	МенеджерСущностей.НачатьТранзакцию();
	
	Попытка
		Автор = Новый Автор;
		Автор.Имя = "Фоновое";
		Автор.ВтороеИмя = "Задание";
		МенеджерСущностей.Сохранить(Автор);
		
		// Фиксируем транзакцию
		МенеджерСущностей.ЗафиксироватьТранзакцию();
	Исключение
		// В случае ошибки откатываем транзакцию
		МенеджерСущностей.ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Процедура для выполнения в фоновом задании с пулом соединений
// Создание автора при активном пуле соединений (используется в тестах)
// Параметры:
//   ПараметрыЗадания - Структура - Данные для выполнения (МенеджерСущностей, НомерЗадания)
Процедура ФоновоеЗаданиеСозданияАвтораСПулом(ПараметрыЗадания) Экспорт
	МенеджерСущностей = ПараметрыЗадания.МенеджерСущностей;
	НомерЗадания = ПараметрыЗадания.НомерЗадания;
	
	// Начинаем транзакцию в фоновом задании (контекст определяется автоматически)
	МенеджерСущностей.НачатьТранзакцию();
	
	Попытка
		Автор = Новый Автор;
		Автор.Имя = "Фоновое" + НомерЗадания;
		Автор.ВтороеИмя = "Задание";
		МенеджерСущностей.Сохранить(Автор);
		
		// Имитируем некоторую работу
		Приостановить(10 + НомерЗадания * 5); // Разные времена выполнения
		
		// Фиксируем транзакцию
		МенеджерСущностей.ЗафиксироватьТранзакцию();
	Исключение
		// В случае ошибки откатываем транзакцию
		МенеджерСущностей.ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры