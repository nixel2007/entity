// BSLLS:MagicNumber-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:DuplicateStringLiteral-off
// BSLLS:LineLength-off
#Использовать ".."
#Использовать "utils"

#Использовать reflector

Перем МенеджерСущностей;
Перем Коннектор;

Функция ПолучитьСписокТестов(Тестер) Экспорт

	ЗапускатьТестыPostgres = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("TESTRUNNER_RUN_POSTGRES_TESTS", "true");
	
	Тесты = Новый Массив;

	Если ЗапускатьТестыPostgres = "true" Тогда
		Рефлектор = Новый Рефлектор();
		ТаблицаМетодов = Рефлектор.ПолучитьТаблицуМетодов(ЭтотОбъект);
		Для Каждого Метод Из ТаблицаМетодов Цикл
			Если Метод.Аннотации.Найти("Тест") <> Неопределено Тогда
				Тесты.Добавить(Метод.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Тесты;

КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	
	ПодключитьСценарий(
		ОбъединитьПути(ТекущийКаталог(), "tests", "fixtures", "СущностьСоВсемиТипамиКолонок.os"), 
		"СущностьСоВсемиТипамиКолонок");

	ПодключитьСценарий(
		ОбъединитьПути(ТекущийКаталог(), "tests", "fixtures", "СущностьБезГенерируемогоИдентификатора.os"), 
		"СущностьБезГенерируемогоИдентификатора");

	ПодключитьСценарий(
		ОбъединитьПути(ТекущийКаталог(), "tests", "fixtures", "АвтоинкрементныйКлючБезКолонок.os"), 
		"АвтоинкрементныйКлючБезКолонок");
	
	Хост = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_HOST", "localhost");
	Порт = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_PORT", "5432");
	Пользователь = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_USERNAME", "postgres");
	Пароль = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_PASSWORD", "postgres");
	ИмяБД = ТестовыеУтилиты.ПолучитьПеременнуюСредыИлиЗначение("POSTGRES_DATABASE", "postgres");
	СтрокаСоединения = СтрШаблон(
		"Host=%1;Username=%2;Password=%3;Database=%4;port=%5;",
		Хост,
		Пользователь,
		Пароль,
		ИмяБД,
		Порт
	);
	МенеджерСущностей = Новый МенеджерСущностей(Тип("КоннекторPostgreSQL"), СтрокаСоединения);

	МенеджерСущностей.Инициализировать();	
	Коннектор = МенеджерСущностей.ПолучитьКоннектор();

	ТестовыеУтилиты.УдалитьТаблицыВБазеДанных(Коннектор);
	
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	ТестовыеУтилиты.УдалитьТаблицыВБазеДанных(Коннектор);
	Коннектор.Закрыть();
	МенеджерСущностей.Закрыть();
КонецПроцедуры

&Тест
Процедура КоннекторPostgreSQLРеализуетИнтерфейсКоннектора() Экспорт

	ИнтерфейсОбъекта = Новый ИнтерфейсОбъекта();
	ИнтерфейсОбъекта.ИзОбъекта(Тип("АбстрактныйКоннектор"));
	
	РефлекторОбъекта = Новый РефлекторОбъекта(Тип("КоннекторPostgreSQL"));
	РефлекторОбъекта.РеализуетИнтерфейс(ИнтерфейсОбъекта, Истина);

КонецПроцедуры

&Тест
Процедура Сохранить() Экспорт
	
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
	
	ЗависимаяСущность = Новый СущностьСоВсемиТипамиКолонок;
	ЗависимаяСущность.Целое = 2;

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 1;
	Сущность.Дробное = 1.2;
	Сущность.БулевоИстина = Истина;
	Сущность.БулевоЛожь = Ложь;
	Сущность.Строка = "Строка";
	Сущность.Дата = Дата(2018, 1, 1);
	Сущность.Время = Дата(1, 1, 1, 10, 53, 20); // проблема с типами
	Сущность.ДатаВремя = Дата(2018, 1, 1, 10, 53, 20);
	Сущность.Ссылка = ЗависимаяСущность;
	Сущность.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("Привет, Мир!");

	Коннектор.Сохранить(ОбъектМодели, ЗависимаяСущность);
	Коннектор.Сохранить(ОбъектМодели, Сущность);
	
	ТекстЗапроса = СтрШаблон(
		"SELECT * FROM %1 WHERE %2 = %3",
		ОбъектМодели.ИмяТаблицы(),
		ОбъектМодели.Идентификатор().ИмяКолонки,
		Сущность.Целое
	);
	РезультатЗапроса = Коннектор.ВыполнитьЗапрос(ТекстЗапроса);
	ДанныеИзБазы = РезультатЗапроса[0];
	
	Ожидаем.Что(ДанныеИзБазы.Целое, "Сущность.Целое сохранилось корректно").Равно(Сущность.Целое);
	Ожидаем.Что(ДанныеИзБазы.Дробное, "Сущность.Дробное сохранилось корректно").Равно(Сущность.Дробное);
	Ожидаем.Что(ДанныеИзБазы.БулевоИстина, "Сущность.БулевоИстина сохранилось корректно").Равно(Сущность.БулевоИстина);
	Ожидаем.Что(ДанныеИзБазы.БулевоЛожь, "Сущность.БулевоЛожь сохранилось корректно").Равно(Сущность.БулевоЛожь);
	Ожидаем.Что(ДанныеИзБазы.Строка, "Сущность.Строка сохранилось корректно").Равно(Сущность.Строка);
	Ожидаем.Что(ДанныеИзБазы.Дата, "Сущность.Дата сохранилось корректно").Равно(Сущность.Дата);
	//Ожидаем.Что(ДанныеИзБазы.Время, "Сущность.Время сохранилось корректно").Равно(Сущность.Время); // проблема с типами
	Ожидаем.Что(ДанныеИзБазы.ДатаВремя, "Сущность.ДатаВремя сохранилось корректно").Равно(Сущность.ДатаВремя);
	Ожидаем.Что(ДанныеИзБазы.Ссылка, "Сущность.Ссылка сохранилось корректно").Равно(Сущность.Ссылка.Целое);
	Ожидаем.Что(ДанныеИзБазы.ДвоичныеДанные, "ЗначенияКолонок.ДвоичныеДанные получено корректно").Равно(Сущность.ДвоичныеДанные);

	Коннектор.Удалить(ОбъектМодели, Сущность);
	
КонецПроцедуры

&Тест
Процедура СозданиеМинимальнойСущности() Экспорт
	
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("АвтоинкрементныйКлючБезКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
	
	Сущность = Новый АвтоинкрементныйКлючБезКолонок();
	Коннектор.Сохранить(ОбъектМодели, Сущность);
	
	Сообщить("Идентификатор: " + Сущность.Идентификатор);
	Ожидаем.Что(Сущность.Идентификатор, "Идентификатор сущности без колонок заполнился без ошибок").Больше(0);

КонецПроцедуры

&Тест
Процедура ОткатТранзакции() Экспорт

	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
		
	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 1;
	
	Коннектор.НачатьТранзакцию();
	Коннектор.Сохранить(ОбъектМодели, Сущность);
	Коннектор.ОтменитьТранзакцию();

	ОпцииПоиска = Новый ОпцииПоиска;
	ОпцииПоиска.Отбор("Целое", ВидСравнения.Равно, Сущность.Целое);
	
	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);
	Ожидаем.Что(НайденныеСтроки, "Транзакция отменилась").ИмеетДлину(0);

КонецПроцедуры

&Тест
Процедура ПолучитьЗначенияКолонокСущности() Экспорт
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
	
	ЗависимаяСущность = Новый СущностьСоВсемиТипамиКолонок;
	ЗависимаяСущность.Целое = 2;
	
	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 1;
	Сущность.Дробное = 1.2;
	Сущность.БулевоИстина = Истина;
	Сущность.БулевоЛожь = Ложь;
	Сущность.Строка = "Строка";
	Сущность.Дата = Дата(2018, 1, 1);
	Сущность.Время = Дата(1, 1, 1, 10, 53, 20); // проблема с типами
	Сущность.ДатаВремя = Дата(2018, 1, 1, 10, 53, 20);
	Сущность.Ссылка = ЗависимаяСущность;
	Сущность.ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки("Привет, Мир!");

	Коннектор.Сохранить(ОбъектМодели, ЗависимаяСущность);
	Коннектор.Сохранить(ОбъектМодели, Сущность);
	
	ОпцииПоиска = Новый ОпцииПоиска;
	ОпцииПоиска.Отбор("Целое", ВидСравнения.Равно, Сущность.Целое);
	
	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);
	ЗначенияКолонок = НайденныеСтроки[0];
	
	Ожидаем.Что(ЗначенияКолонок.Получить("Целое"), "ЗначенияКолонок.Целое получено корректно").Равно(Сущность.Целое);
	Ожидаем.Что(ЗначенияКолонок.Получить("Дробное"), "ЗначенияКолонок.Дробное получено корректно").Равно(Сущность.Дробное);
	Ожидаем.Что(ЗначенияКолонок.Получить("БулевоИстина"), "ЗначенияКолонок.БулевоИстина получено корректно").Равно(Сущность.БулевоИстина);
	Ожидаем.Что(ЗначенияКолонок.Получить("БулевоЛожь"), "ЗначенияКолонок.БулевоЛожь получено корректно").Равно(Сущность.БулевоЛожь);
	Ожидаем.Что(ЗначенияКолонок.Получить("Строка"), "ЗначенияКолонок.Строка получено корректно").Равно(Сущность.Строка);
	Ожидаем.Что(ЗначенияКолонок.Получить("Дата"), "ЗначенияКолонок.Дата получено корректно").Равно(Сущность.Дата);
	//Ожидаем.Что(ЗначенияКолонок.Получить("Время"), "ЗначенияКолонок.Время получено корректно").Равно(Сущность.Время); // проблема с типами
	Ожидаем.Что(ЗначенияКолонок.Получить("ДатаВремя"), "ЗначенияКолонок.ДатаВремя получено корректно").Равно(Сущность.ДатаВремя);
	Ожидаем.Что(ЗначенияКолонок.Получить("Ссылка"), "ЗначенияКолонок.Ссылка получено корректно").Равно(Сущность.Ссылка.Целое);
	Ожидаем.Что(ЗначенияКолонок.Получить("ДвоичныеДанные"), "ЗначенияКолонок.ДвоичныеДанные получено корректно").Равно(Сущность.ДвоичныеДанные);

КонецПроцедуры

&Тест
Процедура ПоискСоСложнымОтбором() Экспорт
	
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьБезГенерируемогоИдентификатора"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
	
	Сущность = Новый СущностьБезГенерируемогоИдентификатора;
	Сущность.ВнутреннийИдентификатор = 1;
	Коннектор.Сохранить(ОбъектМодели, Сущность);
	
	Сущность = Новый СущностьБезГенерируемогоИдентификатора;
	Сущность.ВнутреннийИдентификатор = 2;
	Коннектор.Сохранить(ОбъектМодели, Сущность);
	
	Сущность = Новый СущностьБезГенерируемогоИдентификатора;
	Сущность.ВнутреннийИдентификатор = 3;
	Коннектор.Сохранить(ОбъектМодели, Сущность);
	
	ОпцииПоиска = Новый ОпцииПоиска;
	ОпцииПоиска.Отбор("Идентификатор", ВидСравнения.Больше, 1);
		
	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);
	Ожидаем.Что(НайденныеСтроки, "Сущности нашлись с одним отбором").ИмеетДлину(2);

	ОпцииПоиска = Новый ОпцииПоиска;
	ОпцииПоиска.Отбор("Идентификатор", ВидСравнения.Больше, 1);
	ОпцииПоиска.Отбор("Идентификатор", ВидСравнения.Меньше, 3);
	
	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);
	Ожидаем.Что(НайденныеСтроки, "Сущность нашлась с массивов отборов").ИмеетДлину(1);
	
КонецПроцедуры

&Тест
Процедура ПоискВСписке() Экспорт

	// Дано
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 1;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 2;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 3;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	// Когда
	МассивПоиска = Новый Массив;
	МассивПоиска.Добавить(1);
	МассивПоиска.Добавить(3);
	
	ОпцииПоиска = Новый ОпцииПоиска();
	ОпцииПоиска.Отбор("Целое", ВидСравнения.В, МассивПоиска);

	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);

	// Тогда
	Ожидаем.Что(НайденныеСтроки, "Все строки получены").ИмеетДлину(2);
	Ожидаем.Что(НайденныеСтроки[0].Получить("Целое"), "Строки найдены").Равно(1);
	Ожидаем.Что(НайденныеСтроки[1].Получить("Целое"), "Строки найдены").Равно(3);

КонецПроцедуры

&Тест
Процедура ПоискВПустомСписке() Экспорт

	// Дано
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
	
	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 1;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 2;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 3;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	// Когда
	МассивПоиска = Новый Массив;
	
	ОпцииПоиска = Новый ОпцииПоиска();
	ОпцииПоиска.Отбор("Целое", ВидСравнения.В, МассивПоиска);

	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);

	// Тогда
	Ожидаем.Что(НайденныеСтроки, "Строки не найдены").ИмеетДлину(0);

КонецПроцедуры

&Тест
Процедура ПоискНеВСписке() Экспорт

	// Дано
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 1;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 2;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 3;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	Сущность = Новый СущностьСоВсемиТипамиКолонок;
	Сущность.Целое = 4;
	Коннектор.Сохранить(ОбъектМодели, Сущность);

	// Когда
	МассивПоиска = Новый Массив;
	МассивПоиска.Добавить(1);
	МассивПоиска.Добавить(3);
	
	ОпцииПоиска = Новый ОпцииПоиска();
	ОпцииПоиска.Отбор("Целое", ВидСравнения.НеВ, МассивПоиска);

	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);

	// Тогда
	Ожидаем.Что(НайденныеСтроки, "Все строки получены").ИмеетДлину(2);
	Ожидаем.Что(НайденныеСтроки[0].Получить("Целое"), "Строки найдены").Равно(2);
	Ожидаем.Что(НайденныеСтроки[1].Получить("Целое"), "Строки найдены").Равно(4);

КонецПроцедуры

&Тест
Процедура ВыбратьПервые() Экспорт

	// Дано
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
	
	ТестовыеУтилиты.СохранитьСущностьСоВсемиТипамиКолонок(Коннектор, ОбъектМодели, 1);
	ТестовыеУтилиты.СохранитьСущностьСоВсемиТипамиКолонок(Коннектор, ОбъектМодели, 2);
	ТестовыеУтилиты.СохранитьСущностьСоВсемиТипамиКолонок(Коннектор, ОбъектМодели, 3);

	// Когда
	ОпцииПоиска = Новый ОпцииПоиска;
	ОпцииПоиска.Первые(2);

	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);

	// Тогда
	Ожидаем.Что(НайденныеСтроки, "Все строки получены").ИмеетДлину(2);
	Ожидаем.Что(НайденныеСтроки[0].Получить("Целое"), "Первая строка").Равно(1);
	Ожидаем.Что(НайденныеСтроки[1].Получить("Целое"), "Вторая строка").Равно(2);

КонецПроцедуры

&Тест
Процедура ВыбратьПервыеСоСмещением() Экспорт

	// Дано
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
	
	ТестовыеУтилиты.СохранитьСущностьСоВсемиТипамиКолонок(Коннектор, ОбъектМодели, 1);
	ТестовыеУтилиты.СохранитьСущностьСоВсемиТипамиКолонок(Коннектор, ОбъектМодели, 2);
	ТестовыеУтилиты.СохранитьСущностьСоВсемиТипамиКолонок(Коннектор, ОбъектМодели, 3);
	ТестовыеУтилиты.СохранитьСущностьСоВсемиТипамиКолонок(Коннектор, ОбъектМодели, 4);

	// Когда
	ОпцииПоиска = Новый ОпцииПоиска;
	ОпцииПоиска
		.Первые(2)
		.Смещение(1)
		.СортироватьПо("Целое", НаправлениеСортировки.Возр);

	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);

	// Тогда
	Ожидаем.Что(НайденныеСтроки, "Все строки получены").ИмеетДлину(2);
	Ожидаем.Что(НайденныеСтроки[0].Получить("Целое"), "Первая строка").Равно(2);
	Ожидаем.Что(НайденныеСтроки[1].Получить("Целое"), "Вторая строка").Равно(3);

КонецПроцедуры

&Тест
Процедура УдалениеСущности() Экспорт
	
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("АвтоинкрементныйКлючБезКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
	
	Сущность = Новый АвтоинкрементныйКлючБезКолонок();
	Коннектор.Сохранить(ОбъектМодели, Сущность);
	
	Коннектор.Удалить(ОбъектМодели, Сущность);
	
	ТекстЗапроса = СтрШаблон(
		"SELECT * FROM %1 WHERE %2 = %3",
		ОбъектМодели.ИмяТаблицы(),
		ОбъектМодели.Идентификатор().ИмяКолонки,
		Сущность.Идентификатор
	);
	РезультатЗапроса = Коннектор.ВыполнитьЗапрос(ТекстЗапроса);
	Ожидаем.Что(РезультатЗапроса, "Сущность удалилась").ИмеетДлину(0);
	
КонецПроцедуры

&Тест
Процедура СортировкаПоДвумКолонкам() Экспорт

	// Дано
	МодельДанных = Новый МодельДанных();
	ОбъектМодели = МодельДанных.СоздатьОбъектМодели(Тип("СущностьСоВсемиТипамиКолонок"));
	Коннектор.ИнициализироватьТаблицу(ОбъектМодели);

	Сущность1 = Новый СущностьСоВсемиТипамиКолонок;
	Сущность1.Целое = 1;
	Сущность1.ДатаВремя = Дата(2018, 1, 1, 0, 0, 0);
	Коннектор.Сохранить(ОбъектМодели, Сущность1);

	Сущность2 = Новый СущностьСоВсемиТипамиКолонок;
	Сущность2.Целое = 2;
	Сущность2.ДатаВремя = Дата(2018, 1, 1, 0, 0, 0);
	Коннектор.Сохранить(ОбъектМодели, Сущность2);

	Сущность3 = Новый СущностьСоВсемиТипамиКолонок;
	Сущность3.Целое = 3;
	Сущность3.ДатаВремя = Дата(2019, 1, 1, 0, 0, 0);
	Коннектор.Сохранить(ОбъектМодели, Сущность3);

	// Когда
	ОпцииПоиска = Новый ОпцииПоиска();
	ОпцииПоиска
		.СортироватьПо("ДатаВремя", НаправлениеСортировки.Возр)
		.СортироватьПо("Целое", НаправлениеСортировки.Убыв);

	НайденныеСтроки = Коннектор.НайтиСтрокиВТаблице(ОбъектМодели, ОпцииПоиска);

	// Тогда
	Ожидаем.Что(НайденныеСтроки, "Все строки получены").ИмеетДлину(3);
	Ожидаем.Что(НайденныеСтроки[0].Получить("Целое"), "Строки отсортированы по полю").Равно(2);
	Ожидаем.Что(НайденныеСтроки[1].Получить("Целое"), "Строки отсортированы по полю").Равно(1);
	Ожидаем.Что(НайденныеСтроки[2].Получить("Целое"), "Строки отсортированы по полю").Равно(3);

КонецПроцедуры

//ПередЗапускомТеста();
//ПоискВСписке();
//ПослеЗапускаТеста();
