#Использовать "../Аннотации"
#Использовать "../internal"

#Использовать asserts
#Использовать logos
#Использовать reflector

// Хранит данные о типах полей, колонках, настроек таблиц для типов сущностей
Перем МодельДанных;

// Хранит коннектор к БД, транслирующий команды менеджера сущностей в запросы к БД
Перем Коннектор;
Перем СтрокаСоединенияКоннектора;
Перем ПараметрыКоннектора;

// Пул соединений для потокобезопасной работы с транзакциями
Перем ПулСоединений;
Перем РазмерПулаСоединений;

// Управление контекстами транзакций
Перем ТекущиеКонтексты; // Соответствие: КонтекстID -> Истина (активные контексты)
Перем СчетчикКонтекстов; // Для генерации уникальных ID контекстов

Перем Лог;

// Конструктор объекта МенеджерСущностей.
//
// Параметры:
//   ТипКоннектора - Тип - Тип класса, реализующего интерфейс Коннектор.
//   СтрокаСоединения - Строка - Строка соединения к БД, к которой подключается коннектор.
//   ППараметрыКоннектора - Массив - Массив дополнительных параметров коннектора. Содержимое произвольное.
//   РРазмерПулаСоединений - Число - Размер пула соединений для потокобезопасной работы (по умолчанию 5)
//
Процедура ПриСозданииОбъекта(Знач ТипКоннектора, Знач СтрокаСоединения = "", Знач ППараметрыКоннектора = Неопределено, Знач РРазмерПулаСоединений = 5)
	Лог = Логирование.ПолучитьЛог("oscript.lib.entity.manager");
	Лог.Отладка("Инициализация менеджера сущностей с коннектором %1", ТипКоннектора);
	ПроверитьПоддержкуИнтерфейсаКоннектора(ТипКоннектора);

	МодельДанных = Новый МодельДанных;

	Коннектор = РаботаСКоннекторами.СоздатьКоннектор(ТипКоннектора);

	СтрокаСоединенияКоннектора = СтрокаСоединения;
	Если ППараметрыКоннектора = Неопределено Тогда
		ПараметрыКоннектора = Новый Массив;
	Иначе
		ПараметрыКоннектора = ППараметрыКоннектора;
	КонецЕсли;
	
	РазмерПулаСоединений = РРазмерПулаСоединений;
	ПулСоединений = Неопределено; // Будет инициализирован в методе Инициализировать()
	
	// Инициализация управления контекстами
	ТекущиеКонтексты = Новый Соответствие;
	СчетчикКонтекстов = 0;
КонецПроцедуры

// Регистрирует переданный тип класса-сценария в модели данных.
//
// Параметры:
//   ТипСущности - Тип - Тип для добавления в модель
//
Процедура ДобавитьКлассВМодель(ТипСущности) Экспорт
	ПроверитьЧтоКлассЯвляетсяСущностью(ТипСущности);

	МодельДанных.СоздатьОбъектМодели(ТипСущности);
КонецПроцедуры

// Получить модель данных - хранилище информации о типах полей, колонок, таблиц для типов сущостей.
// 
// Возвращаемое значение:
//   МодельДанных
//
Функция ПолучитьМодельДанных() Экспорт
	Возврат МодельДанных;
КонецФункции

// Запускает процессы инициализации коннектора и таблиц БД.
//
Процедура Инициализировать() Экспорт
	
	РаботаСКоннекторами.ОткрытьКоннектор(Коннектор, СтрокаСоединенияКоннектора, ПараметрыКоннектора);

	// Инициализируем пул соединений только если задан положительный размер
	Если РазмерПулаСоединений > 0 Тогда
		ТипКоннектора = ТипЗнч(Коннектор);
		ПулСоединений = Новый ПулСоединений(РазмерПулаСоединений, ТипКоннектора, СтрокаСоединенияКоннектора, ПараметрыКоннектора);
	КонецЕсли;

	ОбъектыМодели = МодельДанных.ПолучитьОбъектыМодели();
	
	Для Каждого ОбъектМодели Из ОбъектыМодели Цикл
		Коннектор.ИнициализироватьТаблицу(ОбъектМодели);
		
		ПодчиненныеТаблицы = ОбъектМодели.ПодчиненныеТаблицы();
		Для Каждого ПодчиненнаяТаблица Из ПодчиненныеТаблицы Цикл
			
			ОбъектМоделиЭлементКоллекции = ОбработкаКоллекций.ПолучитьОбъектМоделиДляПодчиненнойТаблицы(
				ОбъектМодели, 
				ПодчиненнаяТаблица
			);
			
			Коннектор.ИнициализироватьТаблицу(ОбъектМоделиЭлементКоллекции);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Создает экземпляр сущности, расширенный методами паттерна Active Record.
//
// Параметры:
//   ТипСущности - Тип - Тип создаваемой сущности.
//
//  Возвращаемое значение:
//   Произвольный - экземпляр класса сущности с типом, привязанным к переданному "ТипуСущности",
//                  с дополнительными методами паттерна Active Record.
//
Функция СоздатьЭлемент(ТипСущности) Экспорт
	ОбъектМодели = МодельДанных.Получить(ТипСущности);

	Возврат АктивнаяЗапись.СоздатьИзМенеджера(ОбъектМодели, ЭтотОбъект);
КонецФункции

// Сохраняет сущность в БД.
//
// Параметры:
//   Сущность - Произвольный - Объект (экземпляр класса, зарегистрированного в модели) для сохранения в БД.
//   КонтекстID - Строка - Идентификатор контекста транзакции (необязательно)
//
Процедура Сохранить(Сущность, КонтекстID = Неопределено) Экспорт
	ТипСущности = АктивнаяЗапись.ТипСущности(Сущность);
	ОбъектМодели = МодельДанных.Получить(ТипСущности);
	ПулСущностей = ПолучитьПулСущностей(ТипСущности);
	
	Если КонтекстID <> Неопределено Тогда
		// Используем коннектор контекста для потокобезопасной операции
		КоннекторДляОперации = ПолучитьКоннекторДляКонтекста(КонтекстID);
	Иначе
		// Автоматический выбор коннектора
		КоннекторДляОперации = ПолучитьКоннекторДляОперации();
	КонецЕсли;
	
	РаботаСКоннекторами.Сохранить(КоннекторДляОперации, ОбъектМодели, ПулСущностей, Сущность);
КонецПроцедуры

// Осуществляет поиск сущностей переданного типа по идентификатору.
//
// Параметры:
//   ТипСущности - Тип - Тип искомой сущности.
//   ОпцииПоиска - Произвольный - Опции поиска.
//     Если параметр не задан или равен "Неопределено", то возвращаются все найденные сущности указанного типа.
//     Если параметр имеет тип "Соответствие", то каждое значение соответствия преобразуется к условию поиска
//      ИмяПоля = ЗначениеПоля, где ИмяПоля - ключ элемента соответствия, ЗначениеПоля - значение элемента соответствия.
//     Если параметр имеет тип "ОпцииПоиска", то опции передаются как есть.
//   КонтекстID - Строка - Идентификатор контекста транзакции (необязательно)
//
//  Возвращаемое значение:
//   Массив - Массив найденных сущностей. В качестве элементов массива выступают
//     экземпляры класса с типом, равным переданному параметру "ТипСущности", с заполненными значениями полей.
//
Функция Получить(ТипСущности, Знач ОпцииПоиска = Неопределено, КонтекстID = Неопределено) Экспорт
	ОбъектМодели = МодельДанных.Получить(ТипСущности);
	ПулСущностей = ПолучитьПулСущностей(ТипСущности);
	Если ОпцииПоиска = Неопределено Тогда
		ОпцииПоиска = Новый ОпцииПоиска;
	КонецЕсли;
	
	Если КонтекстID <> Неопределено Тогда
		// Используем коннектор контекста для потокобезопасной операции
		КоннекторДляОперации = ПолучитьКоннекторДляКонтекста(КонтекстID);
	Иначе
		// Автоматический выбор коннектора
		КоннекторДляОперации = ПолучитьКоннекторДляОперации();
	КонецЕсли;
	
	Возврат РаботаСКоннекторами.Получить(КоннекторДляОперации, ОбъектМодели, ПулСущностей, ОпцииПоиска);
КонецФункции

// Осуществляет поиск сущности переданного типа по идентификатору.
//
// Параметры:
//   ТипСущности - Тип - Тип искомой сущности.
//   ОпцииПоиска - Произвольный - Опции поиска.
//     Если параметр не задан или равен "Неопределено", то возвращаются все найденные сущности указанного типа.
//     Если параметр имеет тип "Соответствие", то каждое значение соответствия преобразуется к условию поиска
//      ИмяПоля = ЗначениеПоля, где ИмяПоля - ключ элемента соответствия, ЗначениеПоля - значение элемента соответствия.
//     Если параметр имеет тип "ОпцииПоиска", то опции передаются как есть.
//     Любой другой тип интерпретируется как поиск по &Идентификатору.
//   КонтекстID - Строка - Идентификатор контекста транзакции (необязательно)
//
//  Возвращаемое значение:
//   Произвольный - Если сущность была найдена, то возвращается экземпляр класса с типом, равным переданному параметру
//     "ТипСущности", с заполненными значениями полей. Иначе возвращается "Неопределено".
//
Функция ПолучитьОдно(ТипСущности, Знач ОпцииПоиска = Неопределено, КонтекстID = Неопределено) Экспорт
	ОбъектМодели = МодельДанных.Получить(ТипСущности);
	ПулСущностей = ПолучитьПулСущностей(ТипСущности);
	Если ОпцииПоиска = Неопределено Тогда
		ОпцииПоиска = Новый ОпцииПоиска;
	КонецЕсли;
	
	Если КонтекстID <> Неопределено Тогда
		// Используем коннектор контекста для потокобезопасной операции
		КоннекторДляОперации = ПолучитьКоннекторДляКонтекста(КонтекстID);
	Иначе
		// Автоматический выбор коннектора
		КоннекторДляОперации = ПолучитьКоннекторДляОперации();
	КонецЕсли;
	
	Возврат РаботаСКоннекторами.ПолучитьОдно(КоннекторДляОперации, ОбъектМодели, ПулСущностей, ОпцииПоиска);
КонецФункции

// Выполняет удаление сущности из базы данных.
// Сущность должна иметь заполненный идентификатор.
//
// Параметры:
//   Сущность - Произвольный - Удаляемая сущность
//   КонтекстID - Строка - Идентификатор контекста транзакции (необязательно)
//
Процедура Удалить(Сущность, КонтекстID = Неопределено) Экспорт
	ТипСущности = АктивнаяЗапись.ТипСущности(Сущность);
	ОбъектМодели = МодельДанных.Получить(ТипСущности);
	ПулСущностей = ПолучитьПулСущностей(ТипСущности);
	
	Если КонтекстID <> Неопределено Тогда
		// Используем коннектор контекста для потокобезопасной операции
		КоннекторДляОперации = ПолучитьКоннекторДляКонтекста(КонтекстID);
	Иначе
		// Автоматический выбор коннектора
		КоннекторДляОперации = ПолучитьКоннекторДляОперации();
	КонецЕсли;
	
	РаботаСКоннекторами.Удалить(КоннекторДляОперации, ОбъектМодели, ПулСущностей, Сущность);
КонецПроцедуры

// Выполняет очистку полную данных библиотеки.
// Дополнительно посылает всем используемым коннекторам запросы на закрытие соединения.
//
Процедура Закрыть() Экспорт
	РаботаСКоннекторами.ЗакрытьКоннектор(Коннектор);
	
	// Закрываем пул соединений
	Если ПулСоединений <> Неопределено Тогда
		ПулСоединений.ЗакрытьВсеСоединения();
	КонецЕсли;
	
	МодельДанных.Очистить();
	СвойстваКоннектора = РаботаСКоннекторами.ПолучитьСвойстваКоннектора(Коннектор);
	ХранилищаСущностей.Закрыть(ТипЗнч(Коннектор), СвойстваКоннектора.СтрокаСоединения, СвойстваКоннектора.Параметры);
	// Для освобожения ссылок на все коннекторы и соединения с СУБД
	ВыполнитьСборкуМусора();
КонецПроцедуры

// Посылает коннектору запрос на начало транзакции.
// 
// Возвращаемое значение:
//   Строка - Идентификатор контекста транзакции (если пул инициализирован)
//   Неопределено - В режиме обратной совместимости (пул не инициализирован)
//
Функция НачатьТранзакцию() Экспорт
	Если ПулСоединений <> Неопределено Тогда
		// Создаем новый контекст транзакции
		КонтекстID = ПолучитьНовыйКонтекстID();
		ТекущиеКонтексты[КонтекстID] = Истина;
		
		// Получаем соединение для контекста и начинаем транзакцию
		Соединение = ПулСоединений.ПолучитьСоединениеДляКонтекста(КонтекстID);
		Соединение.НачатьТранзакцию();
		
		Возврат КонтекстID;
	Иначе
		// Обратная совместимость - используем общий коннектор
		РаботаСКоннекторами.НачатьТранзакцию(Коннектор);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Посылает коннектору запрос на фиксацию транзакции.
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста транзакции (при использовании пула)
//
Процедура ЗафиксироватьТранзакцию(КонтекстID = Неопределено) Экспорт
	Если КонтекстID <> Неопределено Тогда
		// Фиксируем транзакцию и освобождаем контекст
		Соединение = ПулСоединений.ПолучитьСоединениеДляКонтекста(КонтекстID);
		Соединение.ЗафиксироватьТранзакцию();
		ЗавершитьКонтекст(КонтекстID);
	Иначе
		// Обратная совместимость - используем общий коннектор
		РаботаСКоннекторами.ЗафиксироватьТранзакцию(Коннектор);
	КонецЕсли;
КонецПроцедуры

// Посылает коннектору запрос на отмену транзакции.
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста транзакции (при использовании пула)
//
Процедура ОтменитьТранзакцию(КонтекстID = Неопределено) Экспорт
	Если КонтекстID <> Неопределено Тогда
		// Отменяем транзакцию и освобождаем контекст
		Соединение = ПулСоединений.ПолучитьСоединениеДляКонтекста(КонтекстID);
		Соединение.ОтменитьТранзакцию();
		ЗавершитьКонтекст(КонтекстID);
	Иначе
		// Обратная совместимость - используем общий коннектор
		РаботаСКоннекторами.ОтменитьТранзакцию(Коннектор);
	КонецЕсли;
КонецПроцедуры

// Возвращает текущий активный коннектор.
//
//  Возвращаемое значение:
//   АбстрактныйКоннектор - Возвращает экземпляр коннектора. Конкретная реализация определяется параметром
//      ТипКоннектора при вызове конструктора МенеджерСущностей.
//
Функция ПолучитьКоннектор() Экспорт
	Возврат Коннектор;
КонецФункции

// Получить соединение из пула для потокобезопасных операций
//
// Возвращаемое значение:
//   Соединение - СоединениеСущности из пула для выполнения операций БД
//
Функция ПолучитьСоединение() Экспорт
	Если ПулСоединений = Неопределено Тогда
		ВызватьИсключение("Менеджер сущностей не инициализирован. Вызовите метод Инициализировать()");
	КонецЕсли;
	
	Возврат ПулСоединений.ПолучитьСоединение();
КонецФункции

// Вернуть соединение в пул после использования
//
// Параметры:
//   Соединение - СоединениеСущности - Соединение для возврата в пул
//
Процедура ВернутьСоединение(Соединение) Экспорт
	Если ПулСоединений <> Неопределено Тогда
		ПулСоединений.ВернутьСоединение(Соединение);
	КонецЕсли;
КонецПроцедуры

// Получить новый идентификатор контекста
//
// Возвращаемое значение:
//   Строка - Уникальный идентификатор контекста
//
Функция ПолучитьНовыйКонтекстID()
	СчетчикКонтекстов = СчетчикКонтекстов + 1;
	Возврат "Контекст_" + СчетчикКонтекстов;
КонецФункции

// Завершить контекст и освободить связанные ресурсы
//
// Параметры:
//   КонтекстID - Строка - Идентификатор завершаемого контекста
//
Процедура ЗавершитьКонтекст(КонтекстID)
	ТекущиеКонтексты.Удалить(КонтекстID);
	ПулСоединений.ОсвободитьКонтекст(КонтекстID);
КонецПроцедуры

// Получить коннектор для текущей операции (с учетом активных контекстов)
//
// Возвращаемое значение:
//   АбстрактныйКоннектор - Коннектор для выполнения операции
//
Функция ПолучитьКоннекторДляОперации()
	Если ПулСоединений = Неопределено Тогда
		// Режим обратной совместимости
		Возврат Коннектор;
	Иначе
		// В режиме пула - пока используем общий коннектор для операций вне транзакций
		// При активной транзакции будет использоваться коннектор из контекста
		Возврат Коннектор;
	КонецЕсли;
КонецФункции

// Получить коннектор для контекста (для операций в рамках транзакции)
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста транзакции
//
// Возвращаемое значение:
//   АбстрактныйКоннектор - Коннектор, привязанный к контексту
//
Функция ПолучитьКоннекторДляКонтекста(КонтекстID)
	Если ПулСоединений = Неопределено Тогда
		Возврат Коннектор;
	КонецЕсли;
	
	Соединение = ПулСоединений.ПолучитьСоединениеДляКонтекста(КонтекстID);
	Возврат Соединение.ПолучитьКоннектор();
КонецФункции

// Получает ХранилищеСущностей, привязанное к переданному типу сущности.
//
// Параметры:
//   ТипСущности - Тип - Тип сущности, зарегистрированный в Модели
//
//  Возвращаемое значение:
//   ХранилищеСущностей - Хранилище сущностей, привязанное к переданному типу сущности.
//
Функция ПолучитьХранилищеСущностей(ТипСущности) Экспорт
	ОбъектМодели = МодельДанных.Получить(ТипСущности);
	ХранилищеСущностей = ХранилищаСущностей.Получить(
		ОбъектМодели,
		Коннектор,
		ЭтотОбъект // Передаем ссылку на менеджер для доступа к пулу соединений
	);
	Возврат ХранилищеСущностей;
КонецФункции

// @internal
// Для служебного пользования.
//
// Возвращает пул сущностей из хранилища сущностей, привязанного к переданному типу сущности.
//
// Параметры:
//   ТипСущности - Тип - Тип сущности, зарегистрированный в Модели.
//
//  Возвращаемое значение:
//   Соответствие - Пул сущностей.
//
Функция ПолучитьПулСущностей(ТипСущности) Экспорт
	Возврат ПолучитьХранилищеСущностей(ТипСущности).ПолучитьПулСущностей();
КонецФункции

// <Описание процедуры>
//
// Параметры:
//   ТипКоннектора - Тип - Тип, проверяемый на реализацию интерфейса
//
Процедура ПроверитьПоддержкуИнтерфейсаКоннектора(ТипКоннектора)

	ИнтерфейсКоннектор = Новый ИнтерфейсОбъекта;
	ИнтерфейсКоннектор.ИзОбъекта(Тип("АбстрактныйКоннектор"));

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипКоннектора);
	ПоддерживаетсяИнтерфейсКоннектора = РефлекторОбъекта.РеализуетИнтерфейс(ИнтерфейсКоннектор);

	Ожидаем.Что(
		ПоддерживаетсяИнтерфейсКоннектора,
		СтрШаблон("Тип <%1> не реализует интерфейс коннектора", ТипКоннектора)
	).ЭтоИстина();

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   ТипКласса - Тип - Тип, в котором проверяется наличие необходимых аннотаций.
//
Процедура ПроверитьЧтоКлассЯвляетсяСущностью(ТипКласса)

	РефлекторОбъекта = Новый РефлекторОбъекта(ТипКласса);
	ТаблицаМетодов = РефлекторОбъекта.ПолучитьТаблицуМетодов("Сущность", Ложь);
	Ожидаем.Что(ТаблицаМетодов, СтрШаблон("Класс %1 не имеет аннотации &Сущность", ТипКласса)).ИмеетДлину(1);

	ТаблицаСвойств = РефлекторОбъекта.ПолучитьТаблицуСвойств("Идентификатор");
	Ожидаем.Что(ТаблицаСвойств, СтрШаблон("Класс %1 не имеет поля с аннотацией &Идентификатор", ТипКласса)).ИмеетДлину(1);

КонецПроцедуры
