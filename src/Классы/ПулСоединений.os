// Пул соединений для обеспечения потокобезопасности транзакций
// Использует автоматическое назначение коннекторов по контексту выполнения

Перем ДоступныеСоединения; // Очередь доступных соединений
Перем Карта_КонтекстНаКоннектор; // Соответствие: КонтекстID -> СоединениеСущности
Перем Карта_КоннекторНаКонтекст; // Соответствие: СоединениеСущности -> КонтекстID
Перем РазмерПула;
Перем ТипКоннектора;
Перем СтрокаСоединения;
Перем ПараметрыКоннектора;

// Конструктор пула соединений
//
// Параметры:
//   ТПРазмерПула - Число - Максимальное количество соединений в пуле
//   ТПТипКоннектора - Тип - Тип коннектора для создания соединений
//   ТПСтрокаСоединения - Строка - Строка соединения для коннекторов
//   ТППараметрыКоннектора - Массив - Параметры для коннекторов
//
Процедура ПриСозданииОбъекта(ТПРазмерПула, ТПТипКоннектора, ТПСтрокаСоединения, ТППараметрыКоннектора)
	РазмерПула = ТПРазмерПула;
	ТипКоннектора = ТПТипКоннектора;
	СтрокаСоединения = ТПСтрокаСоединения;
	ПараметрыКоннектора = ТППараметрыКоннектора;
	
	ДоступныеСоединения = Новый Массив;
	Карта_КонтекстНаКоннектор = Новый Соответствие;
	Карта_КоннекторНаКонтекст = Новый Соответствие;
	
	// Создаем начальный набор соединений
	Для Индекс = 1 По РазмерПула Цикл
		Соединение = СоздатьНовоеСоединение();
		ДоступныеСоединения.Добавить(Соединение);
	КонецЦикла;
КонецПроцедуры

// Получить соединение из пула
//
// Возвращаемое значение:
//   СоединениеСущности - Свободное соединение для выполнения операций
//
Функция ПолучитьСоединение() Экспорт
	Если ДоступныеСоединения.Количество() > 0 Тогда
		Соединение = ДоступныеСоединения[0];
		ДоступныеСоединения.Удалить(0);
		Возврат Соединение;
	Иначе
		// Если нет доступных соединений, создаем новое временное
		Возврат СоздатьНовоеСоединение();
	КонецЕсли;
КонецФункции

// Получить соединение для контекста (автоматическое назначение)
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста выполнения
//
// Возвращаемое значение:
//   СоединениеСущности - Соединение, привязанное к контексту
//
Функция ПолучитьСоединениеДляКонтекста(КонтекстID) Экспорт
	// Проверяем, есть ли уже соединение для данного контекста
	Если Карта_КонтекстНаКоннектор.Получить(КонтекстID) <> Неопределено Тогда
		Возврат Карта_КонтекстНаКоннектор[КонтекстID];
	КонецЕсли;
	
	// Очищаем завершенные контексты перед выделением нового соединения
	ОчиститьЗавершенныеКонтексты();
	
	// Получаем новое соединение
	Соединение = ПолучитьСоединение();
	
	// Привязываем к контексту
	Карта_КонтекстНаКоннектор[КонтекстID] = Соединение;
	Карта_КоннекторНаКонтекст[Соединение] = КонтекстID;
	
	Возврат Соединение;
КонецФункции

// Вернуть соединение в пул
//
// Параметры:
//   Соединение - СоединениеСущности - Соединение для возврата в пул
//
Процедура ВернутьСоединение(Соединение) Экспорт
	// Удаляем привязку к контексту
	КонтекстID = Карта_КоннекторНаКонтекст.Получить(Соединение);
	Если КонтекстID <> Неопределено Тогда
		Карта_КонтекстНаКоннектор.Удалить(КонтекстID);
		Карта_КоннекторНаКонтекст.Удалить(Соединение);
	КонецЕсли;
	
	Если ДоступныеСоединения.Количество() < РазмерПула Тогда
		// Сбрасываем состояние транзакции перед возвратом в пул
		Соединение.СброситьТранзакцию();
		ДоступныеСоединения.Добавить(Соединение);
	Иначе
		// Пул переполнен, закрываем соединение
		Соединение.Закрыть();
	КонецЕсли;
КонецПроцедуры

// Освободить соединение контекста
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста для освобождения
//
Процедура ОсвободитьКонтекст(КонтекстID) Экспорт
	Соединение = Карта_КонтекстНаКоннектор.Получить(КонтекстID);
	Если Соединение <> Неопределено Тогда
		ВернутьСоединение(Соединение);
	КонецЕсли;
КонецПроцедуры

// Закрыть все соединения в пуле
//
Процедура ЗакрытьВсеСоединения() Экспорт
	// Закрываем все активные соединения в контекстах
	Для Каждого Элемент Из Карта_КонтекстНаКоннектор Цикл
		Соединение = Элемент.Значение;
		Соединение.Закрыть();
	КонецЦикла;
	
	// Закрываем соединения в пуле
	Для Каждого Соединение Из ДоступныеСоединения Цикл
		Соединение.Закрыть();
	КонецЦикла;
	
	ДоступныеСоединения.Очистить();
	Карта_КонтекстНаКоннектор.Очистить();
	Карта_КоннекторНаКонтекст.Очистить();
КонецПроцедуры

// Очистить завершенные контексты
// Проверяет статус фоновых заданий и освобождает соединения завершенных контекстов
//
Процедура ОчиститьЗавершенныеКонтексты()
	Попытка
		// Проверяем наличие менеджера фоновых заданий
		Если ТипЗнч(ФоновыеЗадания) = Тип("МенеджерФоновыхЗаданий") Тогда
			
			// Получаем список активных фоновых заданий
			АктивныеЗадания = ФоновыеЗадания.ПолучитьЗадания();
			ИдентификаторыАктивныхЗаданий = Новый Соответствие;
			
			Для Каждого Задание Из АктивныеЗадания Цикл
				ИдентификаторыАктивныхЗаданий[Строка(Задание.УникальныйИдентификатор)] = Истина;
			КонецЦикла;
			
			// Проверяем контексты и освобождаем соединения завершенных заданий
			КонтекстыДляУдаления = Новый Массив;
			
			Для Каждого Элемент Из Карта_КонтекстНаКоннектор Цикл
				КонтекстID = Элемент.Ключ;
				
				// Если контекст выглядит как идентификатор задания и задание завершилось
				Если СтрДлина(КонтекстID) = 36 И СтрНайти(КонтекстID, "-") > 0 Тогда
					Если ИдентификаторыАктивныхЗаданий.Получить(КонтекстID) = Неопределено Тогда
						// Задание завершилось, добавляем контекст в список для удаления
						КонтекстыДляУдаления.Добавить(КонтекстID);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Освобождаем соединения завершенных контекстов
			Для Каждого КонтекстID Из КонтекстыДляУдаления Цикл
				ОсвободитьКонтекст(КонтекстID);
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		// Если возникла ошибка при работе с менеджером фоновых заданий,
		// продолжаем работу без очистки завершенных контекстов
	КонецПопытки;
КонецПроцедуры

// Создать новое соединение
//
// Возвращаемое значение:
//   СоединениеСущности - Новое соединение с открытым коннектором
//
Функция СоздатьНовоеСоединение()
	Возврат Новый СоединениеСущности(ТипКоннектора, СтрокаСоединения, ПараметрыКоннектора);
КонецФункции