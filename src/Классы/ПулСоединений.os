// Пул соединений для обеспечения потокобезопасности транзакций
// Использует автоматическое назначение коннекторов по контексту выполнения

Перем ДоступныеСоединения; // Очередь доступных соединений
Перем Карта_КонтекстНаКоннектор; // Соответствие: КонтекстID -> СоединениеСущности
Перем Карта_КоннекторНаКонтекст; // Соответствие: СоединениеСущности -> КонтекстID
Перем РазмерПула;
Перем ТипКоннектора;
Перем СтрокаСоединения;
Перем ПараметрыКоннектора;

// Конструктор пула соединений
//
// Параметры:
//   ТПРазмерПула - Число - Максимальное количество соединений в пуле
//   ТПТипКоннектора - Тип - Тип коннектора для создания соединений
//   ТПСтрокаСоединения - Строка - Строка соединения для коннекторов
//   ТППараметрыКоннектора - Массив - Параметры для коннекторов
//
Процедура ПриСозданииОбъекта(ТПРазмерПула, ТПТипКоннектора, ТПСтрокаСоединения, ТППараметрыКоннектора)
	РазмерПула = ТПРазмерПула;
	ТипКоннектора = ТПТипКоннектора;
	СтрокаСоединения = ТПСтрокаСоединения;
	ПараметрыКоннектора = ТППараметрыКоннектора;
	
	ДоступныеСоединения = Новый Массив;
	Карта_КонтекстНаКоннектор = Новый Соответствие;
	Карта_КоннекторНаКонтекст = Новый Соответствие;
	
	// Создаем начальный набор соединений
	Счетчик = 0;
	Пока Счетчик < РазмерПула Цикл
		Соединение = СоздатьНовоеСоединение();
		ДоступныеСоединения.Добавить(Соединение);
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

// Получить соединение из пула
//
// Возвращаемое значение:
//   СоединениеСущности - Свободное соединение для выполнения операций
//
Функция ПолучитьСоединение() Экспорт
	Если ДоступныеСоединения.Количество() > 0 Тогда
		Соединение = ДоступныеСоединения[0];
		ДоступныеСоединения.Удалить(0);
		Возврат Соединение;
	Иначе
		// Если нет доступных соединений, создаем новое временное
		Возврат СоздатьНовоеСоединение();
	КонецЕсли;
КонецФункции

// Получить соединение для контекста (автоматическое назначение)
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста выполнения
//
// Возвращаемое значение:
//   СоединениеСущности - Соединение, привязанное к контексту
//
Функция ПолучитьСоединениеДляКонтекста(КонтекстID) Экспорт
	// Проверяем, есть ли уже соединение для данного контекста
	Если Карта_КонтекстНаКоннектор.Получить(КонтекстID) <> Неопределено Тогда
		Возврат Карта_КонтекстНаКоннектор[КонтекстID];
	КонецЕсли;
	
	// Очищаем завершенные контексты перед выделением нового соединения
	ОчиститьЗавершенныеКонтексты();
	
	// Получаем новое соединение
	Соединение = ПолучитьСоединение();
	
	// Привязываем к контексту
	Карта_КонтекстНаКоннектор[КонтекстID] = Соединение;
	Карта_КоннекторНаКонтекст[Соединение] = КонтекстID;
	
	Возврат Соединение;
КонецФункции

// Вернуть соединение в пул
//
// Параметры:
//   Соединение - СоединениеСущности - Соединение для возврата в пул
//
Процедура ВернутьСоединение(Соединение) Экспорт
	// Удаляем привязку к контексту
	КонтекстID = Карта_КоннекторНаКонтекст.Получить(Соединение);
	Если КонтекстID <> Неопределено Тогда
		Карта_КонтекстНаКоннектор.Удалить(КонтекстID);
		Карта_КоннекторНаКонтекст.Удалить(Соединение);
	КонецЕсли;
	
	Если ДоступныеСоединения.Количество() < РазмерПула Тогда
		// Сбрасываем состояние транзакции перед возвратом в пул
		Соединение.СброситьТранзакцию();
		ДоступныеСоединения.Добавить(Соединение);
	Иначе
		// Пул переполнен, закрываем соединение
		Соединение.Закрыть();
	КонецЕсли;
КонецПроцедуры

// Освободить соединение контекста
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста для освобождения
//
Процедура ОсвободитьКонтекст(КонтекстID) Экспорт
	Соединение = Карта_КонтекстНаКоннектор.Получить(КонтекстID);
	Если Соединение <> Неопределено Тогда
		ВернутьСоединение(Соединение);
	КонецЕсли;
КонецПроцедуры

// Закрыть все соединения в пуле
//
Процедура ЗакрытьВсеСоединения() Экспорт
	// Закрываем все активные соединения в контекстах
	Для Каждого Элемент Из Карта_КонтекстНаКоннектор Цикл
		Соединение = Элемент.Значение;
		Соединение.Закрыть();
	КонецЦикла;
	
	// Закрываем соединения в пуле
	Для Каждого Соединение Из ДоступныеСоединения Цикл
		Соединение.Закрыть();
	КонецЦикла;
	
	ДоступныеСоединения.Очистить();
	Карта_КонтекстНаКоннектор.Очистить();
	Карта_КоннекторНаКонтекст.Очистить();
КонецПроцедуры

Процедура ОчиститьЗавершенныеКонтексты()
	КонтекстыДляПроверки = Новый Массив;
	Для Каждого Элемент Из Карта_КонтекстНаКоннектор Цикл
		КонтекстыДляПроверки.Добавить(Элемент.Ключ);
	КонецЦикла;
	Для Каждого КонтекстID Из КонтекстыДляПроверки Цикл
		Если ПроверитьЗавершениеКонтекста(КонтекстID) Тогда
			ОсвободитьКонтекст(КонтекстID);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Проверить, завершен ли контекст (фоновое задание или основной поток)
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста для проверки
//
// Возвращаемое значение:
//   Булево - Истина, если контекст завершен и может быть освобожден
//
Функция ПроверитьЗавершениеКонтекста(КонтекстID)
	// Проверяем, является ли контекст фоновым заданием
	// Контексты фоновых заданий имеют специальный формат или могут быть идентифицированы
	
	// Простая эвристика: если контекст содержит UUID-подобную структуру,
	// предполагаем, что это может быть ID фонового задания
	Если СтрДлина(КонтекстID) = 36 И СтрЧислоВхождений(КонтекстID, "-") = 4 Тогда
		// Похоже на UUID фонового задания - проверяем через API
		Возврат ПроверитьСтатусФоновогоЗадания(КонтекстID);
	КонецЕсли;
	
	// Для обычных контекстов (типа "Контекст_123") используем временную эвристику
	// В реальной реализации здесь может быть проверка потоков
	Возврат Ложь; // Предполагаем, что контекст еще активен
КонецФункции

// Проверить статус фонового задания по ID
//
// Параметры:
//   ЗаданиеID - Строка - Идентификатор фонового задания
//
// Возвращаемое значение:
//   Булево - Истина, если задание завершено
//
Функция ПроверитьСтатусФоновогоЗадания(ЗаданиеID)
	Попытка
		// Получаем актуальный список заданий. Если задание отсутствует - считаем завершенным.
		МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания();
		Для Каждого Задание Из МассивЗаданий Цикл
			Если Задание.УникальныйИдентификатор <> ЗаданиеID Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				Сост = Задание.Состояние;
			Исключение
				// Не удалось получить состояние - считаем активным
				Возврат Ложь;
			КонецПопытки;
			Если Сост = СостояниеФоновогоЗадания.Активно Тогда
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;

		// Не нашли задание - вероятно завершено и очищено менеджером
		Возврат Истина;
	Исключение
		// При любой ошибке (например, свойство недоступно) возвращаем Ложь - не освобождаем раньше времени
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Создать новое соединение
//
// Возвращаемое значение:
//   СоединениеСущности - Новое соединение с открытым коннектором
//
Функция СоздатьНовоеСоединение()
	Возврат Новый СоединениеСущности(ТипКоннектора, СтрокаСоединения, ПараметрыКоннектора);
КонецФункции