// Пул соединений для обеспечения потокобезопасности транзакций
// Использует автоматическое назначение коннекторов по контексту выполнения

Перем ДоступныеСоединения; // Очередь доступных соединений
Перем Карта_КонтекстНаКоннектор; // Соответствие: КонтекстID -> СоединениеСущности
Перем Карта_КоннекторНаКонтекст; // Соответствие: СоединениеСущности -> КонтекстID
Перем РазмерПула;
Перем ТипКоннектора;
Перем СтрокаСоединения;
Перем ПараметрыКоннектора;

// Конструктор пула соединений
//
// Параметры:
//   ТПРазмерПула - Число - Максимальное количество соединений в пуле
//   ТПТипКоннектора - Тип - Тип коннектора для создания соединений
//   ТПСтрокаСоединения - Строка - Строка соединения для коннекторов
//   ТППараметрыКоннектора - Массив - Параметры для коннекторов
//
Процедура ПриСозданииОбъекта(ТПРазмерПула, ТПТипКоннектора, ТПСтрокаСоединения, ТППараметрыКоннектора)
	РазмерПула = ТПРазмерПула;
	ТипКоннектора = ТПТипКоннектора;
	СтрокаСоединения = ТПСтрокаСоединения;
	ПараметрыКоннектора = ТППараметрыКоннектора;
	
	ДоступныеСоединения = Новый Массив;
	Карта_КонтекстНаКоннектор = Новый Соответствие;
	Карта_КоннекторНаКонтекст = Новый Соответствие;
	
	// Создаем начальный набор соединений
	Для Индекс = 1 По РазмерПула Цикл
		Соединение = СоздатьНовоеСоединение();
		ДоступныеСоединения.Добавить(Соединение);
	КонецЦикла;
КонецПроцедуры

// Получить соединение из пула
//
// Возвращаемое значение:
//   СоединениеСущности - Свободное соединение для выполнения операций
//
Функция ПолучитьСоединение() Экспорт
	Если ДоступныеСоединения.Количество() > 0 Тогда
		Соединение = ДоступныеСоединения[0];
		ДоступныеСоединения.Удалить(0);
		Возврат Соединение;
	Иначе
		// Если нет доступных соединений, создаем новое временное
		Возврат СоздатьНовоеСоединение();
	КонецЕсли;
КонецФункции

// Получить соединение для контекста (автоматическое назначение)
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста выполнения
//
// Возвращаемое значение:
//   СоединениеСущности - Соединение, привязанное к контексту
//
Функция ПолучитьСоединениеДляКонтекста(КонтекстID) Экспорт
	// Проверяем, есть ли уже соединение для данного контекста
	Если Карта_КонтекстНаКоннектор.Получить(КонтекстID) <> Неопределено Тогда
		Возврат Карта_КонтекстНаКоннектор[КонтекстID];
	КонецЕсли;
	
	// Очищаем завершенные контексты перед выделением нового соединения
	ОчиститьЗавершенныеКонтексты();
	
	// Получаем новое соединение
	Соединение = ПолучитьСоединение();
	
	// Привязываем к контексту
	Карта_КонтекстНаКоннектор[КонтекстID] = Соединение;
	Карта_КоннекторНаКонтекст[Соединение] = КонтекстID;
	
	Возврат Соединение;
КонецФункции

// Вернуть соединение в пул
//
// Параметры:
//   Соединение - СоединениеСущности - Соединение для возврата в пул
//
Процедура ВернутьСоединение(Соединение) Экспорт
	// Удаляем привязку к контексту
	КонтекстID = Карта_КоннекторНаКонтекст.Получить(Соединение);
	Если КонтекстID <> Неопределено Тогда
		Карта_КонтекстНаКоннектор.Удалить(КонтекстID);
		Карта_КоннекторНаКонтекст.Удалить(Соединение);
	КонецЕсли;
	
	Если ДоступныеСоединения.Количество() < РазмерПула Тогда
		// Сбрасываем состояние транзакции перед возвратом в пул
		Соединение.СброситьТранзакцию();
		ДоступныеСоединения.Добавить(Соединение);
	Иначе
		// Пул переполнен, закрываем соединение
		Соединение.Закрыть();
	КонецЕсли;
КонецПроцедуры

// Освободить соединение контекста
//
// Параметры:
//   КонтекстID - Строка - Идентификатор контекста для освобождения
//
Процедура ОсвободитьКонтекст(КонтекстID) Экспорт
	Соединение = Карта_КонтекстНаКоннектор.Получить(КонтекстID);
	Если Соединение <> Неопределено Тогда
		ВернутьСоединение(Соединение);
	КонецЕсли;
КонецПроцедуры

// Закрыть все соединения в пуле
//
Процедура ЗакрытьВсеСоединения() Экспорт
	// Закрываем все активные соединения в контекстах
	Для Каждого Элемент Из Карта_КонтекстНаКоннектор Цикл
		Соединение = Элемент.Значение;
		Соединение.Закрыть();
	КонецЦикла;
	
	// Закрываем соединения в пуле
	Для Каждого Соединение Из ДоступныеСоединения Цикл
		Соединение.Закрыть();
	КонецЦикла;
	
	ДоступныеСоединения.Очистить();
	Карта_КонтекстНаКоннектор.Очистить();
	Карта_КоннекторНаКонтекст.Очистить();
КонецПроцедуры

// Очистить завершенные контексты
// Проверяет статус фоновых заданий и освобождает соединения завершенных контекстов
// При недоступности API фоновых заданий использует эвристическую очистку
//
Процедура ОчиститьЗавершенныеКонтексты()
	Попытка
		// Пытаемся использовать API фоновых заданий для точной очистки
		Если ТипЗнч(ФоновыеЗадания) = Тип("МенеджерФоновыхЗаданий") Тогда
			ОчиститьЗавершенныеКонтексты_ЧерезAPI();
		КонецЕсли;
	Исключение
		// Если API недоступен или возникла ошибка, используем эвристическую очистку
	КонецПопытки;
	
	// Эвристическая очистка как запасной вариант
	ОчиститьЗавершенныеКонтексты_Эвристически();
КонецПроцедуры

// Очистка завершенных контекстов через API фоновых заданий
//
Процедура ОчиститьЗавершенныеКонтексты_ЧерезAPI()
	// TODO: Реализовать после изучения полной документации API ФоновыеЗадания
	// Пока что заглушка для будущей реализации
	
	// Предполагаемая логика:
	// 1. Получить список активных фоновых заданий
	// 2. Сравнить контексты (UUID-формат) с идентификаторами активных заданий  
	// 3. Освободить соединения для завершенных заданий
КонецПроцедуры

// Эвристическая очистка контекстов для предотвращения утечек памяти
//
Процедура ОчиститьЗавершенныеКонтексты_Эвристически()
	МаксимальноеКоличествоКонтекстов = 100;
	
	Если Карта_КонтекстНаКоннектор.Количество() > МаксимальноеКоличествоКонтекстов Тогда
		// Создаем список контекстов для удаления (самые старые)
		КонтекстыДляУдаления = Новый Массив;
		Счетчик = 0;
		КоличествоДляУдаления = Карта_КонтекстНаКоннектор.Количество() - МаксимальноеКоличествоКонтекстов;
		
		Для Каждого Элемент Из Карта_КонтекстНаКоннектор Цикл
			Если Счетчик < КоличествоДляУдаления Тогда
				КонтекстыДляУдаления.Добавить(Элемент.Ключ);
				Счетчик = Счетчик + 1;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Освобождаем старые контексты
		Для Каждого КонтекстID Из КонтекстыДляУдаления Цикл
			ОсвободитьКонтекст(КонтекстID);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Создать новое соединение
//
// Возвращаемое значение:
//   СоединениеСущности - Новое соединение с открытым коннектором
//
Функция СоздатьНовоеСоединение()
	Возврат Новый СоединениеСущности(ТипКоннектора, СтрокаСоединения, ПараметрыКоннектора);
КонецФункции