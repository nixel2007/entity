#Использовать "../internal"

// Соединение - обертка над коннектором для обеспечения потокобезопасности
// Каждое соединение содержит собственный экземпляр коннектора и состояние транзакции

Перем Коннектор;
Перем ВТранзакции;

// Конструктор соединения
//
// Параметры:
//   ТипКоннектора - Тип - Тип коннектора для создания
//   СтрокаСоединения - Строка - Строка соединения для коннектора  
//   ПараметрыКоннектора - Массив - Параметры для коннектора
//
Процедура ПриСозданииОбъекта(ТипКоннектора, СтрокаСоединения, ПараметрыКоннектора)
	Коннектор = РаботаСКоннекторами.СоздатьКоннектор(ТипКоннектора);
	РаботаСКоннекторами.ОткрытьКоннектор(Коннектор, СтрокаСоединения, ПараметрыКоннектора);
	ВТранзакции = Ложь;
КонецПроцедуры

// Получить коннектор для выполнения операций
//
// Возвращаемое значение:
//   АбстрактныйКоннектор - Коннектор для работы с БД
//
Функция ПолучитьКоннектор() Экспорт
	Возврат Коннектор;
КонецФункции

// Начать транзакцию
//
Процедура НачатьТранзакцию() Экспорт
	Если НЕ ВТранзакции Тогда
		РаботаСКоннекторами.НачатьТранзакцию(Коннектор);
		ВТранзакции = Истина;
	КонецЕсли;
КонецПроцедуры

// Зафиксировать транзакцию
//
Процедура ЗафиксироватьТранзакцию() Экспорт
	Если ВТранзакции Тогда
		РаботаСКоннекторами.ЗафиксироватьТранзакцию(Коннектор);
		ВТранзакции = Ложь;
	КонецЕсли;
КонецПроцедуры

// Отменить транзакцию
//
Процедура ОтменитьТранзакцию() Экспорт
	Если ВТранзакции Тогда
		РаботаСКоннекторами.ОтменитьТранзакцию(Коннектор);
		ВТранзакции = Ложь;
	КонецЕсли;
КонецПроцедуры

// Проверить, находится ли соединение в транзакции
//
// Возвращаемое значение:
//   Булево - Истина, если транзакция активна
//
Функция ВТранзакции() Экспорт
	Возврат ВТранзакции;
КонецФункции

// Сбросить состояние транзакции (для возврата в пул)
//
Процедура СброситьТранзакцию() Экспорт
	Если ВТранзакции Тогда
		Попытка
			РаботаСКоннекторами.ОтменитьТранзакцию(Коннектор);
		Исключение
			// Игнорируем ошибки при сбросе транзакции
		КонецПопытки;
		ВТранзакции = Ложь;
	КонецЕсли;
КонецПроцедуры

// Закрыть соединение
//
Процедура Закрыть() Экспорт
	СброситьТранзакцию();
	РаботаСКоннекторами.ЗакрытьКоннектор(Коннектор);
КонецПроцедуры

// Сохранить сущность через данное соединение
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Модель сущности
//   ПулСущностей - Соответствие - Пул сущностей
//   Сущность - Произвольный - Сохраняемая сущность
//
Процедура Сохранить(ОбъектМодели, ПулСущностей, Сущность) Экспорт
	РаботаСКоннекторами.Сохранить(Коннектор, ОбъектМодели, ПулСущностей, Сущность);
КонецПроцедуры

// Получить сущности через данное соединение
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Модель сущности
//   ПулСущностей - Соответствие - Пул сущностей
//   ОпцииПоиска - ОпцииПоиска - Опции поиска
//
// Возвращаемое значение:
//   Массив - Найденные сущности
//
Функция Получить(ОбъектМодели, ПулСущностей, ОпцииПоиска) Экспорт
	Возврат РаботаСКоннекторами.Получить(Коннектор, ОбъектМодели, ПулСущностей, ОпцииПоиска);
КонецФункции

// Получить одну сущность через данное соединение
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Модель сущности
//   ПулСущностей - Соответствие - Пул сущностей
//   ОпцииПоиска - ОпцииПоиска - Опции поиска
//
// Возвращаемое значение:
//   Произвольный - Найденная сущность или Неопределено
//
Функция ПолучитьОдно(ОбъектМодели, ПулСущностей, ОпцииПоиска) Экспорт
	Возврат РаботаСКоннекторами.ПолучитьОдно(Коннектор, ОбъектМодели, ПулСущностей, ОпцииПоиска);
КонецФункции

// Удалить сущность через данное соединение
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Модель сущности
//   ПулСущностей - Соответствие - Пул сущностей
//   Сущность - Произвольный - Удаляемая сущность
//
Процедура Удалить(ОбъектМодели, ПулСущностей, Сущность) Экспорт
	РаботаСКоннекторами.Удалить(Коннектор, ОбъектМодели, ПулСущностей, Сущность);
КонецПроцедуры