#Использовать "../internal"

Перем ОбъектМодели;
Перем Коннектор;
Перем ПулСущностей;
Перем МенеджерСущностей; // Ссылка на менеджер для доступа к пулу соединений

Процедура ПриСозданииОбъекта(Знач ПОбъектМодели, Знач ТипКоннектора, Знач СтрокаСоединения, ПараметрыКоннектора, Знач ПМенеджерСущностей = Неопределено)
	ОбъектМодели = ПОбъектМодели;
	Коннектор = РаботаСКоннекторами.СоздатьКоннектор(ТипКоннектора);

	РаботаСКоннекторами.ОткрытьКоннектор(Коннектор, СтрокаСоединения, ПараметрыКоннектора);
	ПулСущностей = Новый Соответствие();
	МенеджерСущностей = ПМенеджерСущностей;
КонецПроцедуры

// Создает экземпляр сущности, расширенный методами паттерна Active Record.
//
//  Возвращаемое значение:
//   Произвольный - экземпляр класса сущности с типом, привязанным к ХранилищуСущностей,
//                  с дополнительными методами паттерна Active Record.
//
Функция СоздатьЭлемент() Экспорт
	Возврат АктивнаяЗапись.СоздатьИзХранилища(ОбъектМодели, ЭтотОбъект);
КонецФункции

// Сохраняет сущность в БД.
//
// Параметры:
//   Сущность - Произвольный - Объект (экземпляр класса, зарегистрированного в модели) для сохранения в БД.
//   Соединение - СоединениеСущности - Соединение для выполнения операции (необязательно)
//
Процедура Сохранить(Сущность, Соединение = Неопределено) Экспорт
	Если Соединение <> Неопределено Тогда
		// Используем переданное соединение для потокобезопасной операции
		Соединение.Сохранить(ОбъектМодели, ПулСущностей, Сущность);
	Иначе
		// Обратная совместимость - используем общий коннектор
		РаботаСКоннекторами.Сохранить(Коннектор, ОбъектМодели, ПулСущностей, Сущность);
	КонецЕсли;
КонецПроцедуры


// Осуществляет поиск сущностей типа, привязанного к ХранилищуСущностей, по идентификатору.
//
// Параметры:
//   ОпцииПоиска - Произвольный - Опции поиска.
//     Если параметр не задан или равен "Неопределено", то возвращаются все найденные сущности указанного типа.
//     Если параметр имеет тип "Соответствие", то каждое значение соответствия преобразуется к условию поиска
//      ИмяПоля = ЗначениеПоля, где ИмяПоля - ключ элемента соответствия, ЗначениеПоля - значение элемента соответствия.
//     Если параметр имеет тип "ОпцииПоиска", то опции передаются как есть.
//
//  Возвращаемое значение:
//   Массив - Массив найденных сущностей. В качестве элементов массива выступают
//     экземпляры класса с типом, привязанным к ХранилищуСущностей, с заполненными значениями полей.
//
Функция Получить(Знач ОпцииПоиска = Неопределено, Соединение = Неопределено) Экспорт
	Если ОпцииПоиска = Неопределено Тогда
		ОпцииПоиска = Новый ОпцииПоиска();
	КонецЕсли;

	Если Соединение <> Неопределено Тогда
		// Используем переданное соединение для потокобезопасной операции
		Возврат Соединение.Получить(ОбъектМодели, ПулСущностей, ОпцииПоиска);
	Иначе
		// Обратная совместимость - используем общий коннектор
		Возврат РаботаСКоннекторами.Получить(Коннектор, ОбъектМодели, ПулСущностей, ОпцииПоиска);
	КонецЕсли;
КонецФункции

// Осуществляет поиск сущности типа, привязанного к ХранилищуСущностей, по идентификатору.
//
// Параметры:
//   ОпцииПоиска - Произвольный - Опции поиска.
//     Если параметр не задан или равен "Неопределено", то возвращаются все найденные сущности указанного типа.
//     Если параметр имеет тип "Соответствие", то каждое значение соответствия преобразуется к условию поиска
//      ИмяПоля = ЗначениеПоля, где ИмяПоля - ключ элемента соответствия, ЗначениеПоля - значение элемента соответствия.
//     Если параметр имеет тип "ОпцииПоиска", то опции передаются как есть.
//     Любой другой тип интерпретируется как поиск по &Идентификатору.
//
//  Возвращаемое значение:
//   Произвольный - Если сущность была найдена, то возвращается экземпляр класса с типом, 
//     привязанным к ХранилищуСущностей, с заполненными значениями полей. Иначе возвращается "Неопределено".
//
Функция ПолучитьОдно(Знач ОпцииПоиска = Неопределено, Соединение = Неопределено) Экспорт
	Если ОпцииПоиска = Неопределено Тогда
		ОпцииПоиска = Новый ОпцииПоиска();
	КонецЕсли;

	Если Соединение <> Неопределено Тогда
		// Используем переданное соединение для потокобезопасной операции
		Возврат Соединение.ПолучитьОдно(ОбъектМодели, ПулСущностей, ОпцииПоиска);
	Иначе
		// Обратная совместимость - используем общий коннектор
		Возврат РаботаСКоннекторами.ПолучитьОдно(Коннектор, ОбъектМодели, ПулСущностей, ОпцииПоиска);
	КонецЕсли;
КонецФункции

// Выполняет удаление сущности из базы данных.
// Сущность должна иметь заполненный идентификатор.
//
// Параметры:
//   Сущность - Произвольный - Удаляемая сущность
//   Соединение - СоединениеСущности - Соединение для выполнения операции (необязательно)
//
Процедура Удалить(Сущность, Соединение = Неопределено) Экспорт
	Если Соединение <> Неопределено Тогда
		// Используем переданное соединение для потокобезопасной операции
		Соединение.Удалить(ОбъектМодели, ПулСущностей, Сущность);
	Иначе
		// Обратная совместимость - используем общий коннектор
		РаботаСКоннекторами.Удалить(Коннектор, ОбъектМодели, ПулСущностей, Сущность);
	КонецЕсли;
КонецПроцедуры

// Выполняет очистку текущего Хранилища сущностей.
// Дополнительно посылает коннектору запрос на закрытие соединения.
//
Процедура Закрыть() Экспорт
	РаботаСКоннекторами.ЗакрытьКоннектор(Коннектор);
	ПулСущностей.Очистить();
КонецПроцедуры

// Посылает коннектору запрос на начало транзакции.
// Если доступен менеджер с пулом соединений, получает соединение из пула.
//
// Возвращаемое значение:
//   Соединение - СоединениеСущности для выполнения транзакционных операций (если используется пул)
//   Неопределено - Если пул недоступен, транзакция выполняется на общем коннекторе
//
Функция НачатьТранзакцию() Экспорт
	Если МенеджерСущностей <> Неопределено Тогда
		// Используем пул соединений для потокобезопасности
		Соединение = МенеджерСущностей.ПолучитьСоединение();
		Соединение.НачатьТранзакцию();
		Возврат Соединение;
	Иначе
		// Обратная совместимость - используем общий коннектор
		РаботаСКоннекторами.НачатьТранзакцию(Коннектор);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Посылает коннектору запрос на фиксацию транзакции.
//
// Параметры:
//   Соединение - СоединениеСущности - Соединение с активной транзакцией (при использовании пула)
//
Процедура ЗафиксироватьТранзакцию(Соединение = Неопределено) Экспорт
	Если Соединение <> Неопределено Тогда
		// Фиксируем транзакцию и возвращаем соединение в пул
		Соединение.ЗафиксироватьТранзакцию();
		МенеджерСущностей.ВернутьСоединение(Соединение);
	Иначе
		// Обратная совместимость - используем общий коннектор
		РаботаСКоннекторами.ЗафиксироватьТранзакцию(Коннектор);
	КонецЕсли;
КонецПроцедуры

// Посылает коннектору запрос на отмену транзакции.
//
// Параметры:
//   Соединение - СоединениеСущности - Соединение с активной транзакцией (при использовании пула)
//
Процедура ОтменитьТранзакцию(Соединение = Неопределено) Экспорт
	Если Соединение <> Неопределено Тогда
		// Отменяем транзакцию и возвращаем соединение в пул
		Соединение.ОтменитьТранзакцию();
		МенеджерСущностей.ВернутьСоединение(Соединение);
	Иначе
		// Обратная совместимость - используем общий коннектор
		РаботаСКоннекторами.ОтменитьТранзакцию(Коннектор);
	КонецЕсли;
КонецПроцедуры

// Возвращает текущий активный коннектор.
//
//  Возвращаемое значение:
//   АбстрактныйКоннектор - Возвращает экземпляр коннектора. Конкретная реализация определяется параметром 
//      ТипКоннектора при вызове конструктора МенеджерСущностей. 
//
Функция ПолучитьКоннектор() Экспорт
	Возврат Коннектор;
КонецФункции

// Возвращает объект модели, связанный с текущим хранилищем сущностей.
//
// Возвращаемое значение:
//  ОбъектМодели
//
Функция ПолучитьОбъектМодели() Экспорт
	Возврат ОбъектМодели;
КонецФункции

// @internal
// Для служебного пользования.
//
// Возвращает пул сущностей текущего объекта.
//
//  Возвращаемое значение:
//   Соответствие - Пул сущностей.
//
Функция ПолучитьПулСущностей() Экспорт
	Возврат ПулСущностей;
КонецФункции
