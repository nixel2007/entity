#Использовать logos
#Использовать strings

Перем Лог;
Перем Коннектор;

Процедура ПриСозданииОбъекта(пКоннектор, пЛог = Неопределено)
	
	Коннектор = пКоннектор;
	Если ЗначениеЗаполнено(пЛог) Тогда
		Лог = пЛог;
	Иначе		
		Лог = Логирование.ПолучитьЛог("oscript.lib.entity.connector.abstractsql");
	КонецЕсли;

КонецПроцедуры

// @Unstable
// Выполнить произвольный запрос и получить результат.
//
// Данный метод не входит в основной интерфейс "Коннектор".
// Не рекомендуется использовать этот метод в прикладном коде, сигнатура метода может измениться.
//
// Параметры:
//   ТекстЗапроса - Строка - Текст выполняемого запроса
//
//  Возвращаемое значение:
//   ТаблицаЗначений - Результат выполнения запроса.
//
Функция ВыполнитьЗапрос(ТекстЗапроса) Экспорт

	Лог.Отладка("Выполнение запроса:%1%2", Символы.ПС, ТекстЗапроса);
	
	Запрос = Коннектор.КонструкторКоннектора.НовыйЗапрос(Коннектор.Соединение);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

// Удаляет строки в таблице по указанному отбору.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Отбор - Массив - Отбор для поиска. Каждый элемент массива должен иметь тип "ЭлементОтбора".
//       Каждый элемент отбора преобразуется к условию поиска. В качестве "ПутьКДанным" указываются имена колонок.
//
Процедура УдалитьСтрокиВТаблице(ОбъектМодели, Знач Отбор) Экспорт

	НайденныеСтроки = Новый Массив;
	Колонки = ОбъектМодели.Колонки();
	
	Запрос = Коннектор.КонструкторКоннектора.НовыйЗапрос(Коннектор.Соединение);
	
	ТекстЗапроса = СтрШаблон(
		"DELETE FROM %1",
		ОбъектМодели.ИмяТаблицы()
	);
	
	СтрокаУсловий = ПолучитьСтрокуУсловий(Запрос, Отбор);
		
	Если ЗначениеЗаполнено(СтрокаУсловий) Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "WHERE " + СтрокаУсловий;
	КонецЕсли;
	
	Лог.Отладка("Удаление сущностей в таблице %1:%2%3", ОбъектМодели.ИмяТаблицы(), Символы.ПС, ТекстЗапроса);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.ВыполнитьКоманду();

КонецПроцедуры

// Осуществляет поиск строк в таблице по указанному отбору.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Отбор - Массив - Отбор для поиска. Каждый элемент массива должен иметь тип "ЭлементОтбора".
//       Каждый элемент отбора преобразуется к условию поиска. В качестве "ПутьКДанным" указываются имена колонок.
//
//  Возвращаемое значение:
//   Массив - Массив, элементами которого являются "Соответствия". Ключом элемента соответствия является имя колонки,
//     значением элемента соответствия - значение колонки.
//
Функция НайтиСтрокиВТаблице(ОбъектМодели, Знач Отбор = Неопределено, Знач Сортировка = Неопределено) Экспорт

	НайденныеСтроки = Новый Массив;
	Колонки = ОбъектМодели.Колонки();
	
	Запрос = Коннектор.КонструкторКоннектора.НовыйЗапрос(Коннектор.Соединение);
	
	ТекстЗапроса = СтрШаблон(
		"SELECT * FROM %1",
		ОбъектМодели.ИмяТаблицы()
	);
	
	СтрокаУсловий = ПолучитьСтрокуУсловий(Запрос, Отбор);
	
	Если ЗначениеЗаполнено(СтрокаУсловий) Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "WHERE " + СтрокаУсловий;
	КонецЕсли;

	СтрокаСортировки = ПолучитьСтрокуСортировки(Сортировка);

	Если ЗначениеЗаполнено(СтрокаСортировки) Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ORDER BY " + СтрокаСортировки;
	КонецЕсли;
	
	Лог.Отладка("Поиск сущности в таблице %1:%2%3", ОбъектМодели.ИмяТаблицы(), Символы.ПС, ТекстЗапроса);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Лог.Отладка("Сущность с типом %1 не найдена", ОбъектМодели.ТипСущности());
		Возврат НайденныеСтроки;
	КонецЕсли;
	
	Для Каждого СтрокаИзБазы Из Результат Цикл
		ЗначенияКолонок = Новый Соответствие;
		
		Для Каждого Колонка Из Колонки Цикл
			
			ЗначениеКолонки = СтрокаИзБазы[Колонка.ИмяКолонки];
			ЗначенияКолонок.Вставить(Колонка.ИмяКолонки, ЗначениеКолонки);
		
		КонецЦикла;
		
		НайденныеСтроки.Добавить(ЗначенияКолонок);
	КонецЦикла;
	
	Возврат НайденныеСтроки;

КонецФункции

// Удаляет сущность из таблицы БД.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//   Сущность - Произвольный - Объект (экземпляр класса, зарегистрированного в модели) для удаления из БД.
//
Процедура Удалить(ОбъектМодели, Сущность) Экспорт

	ИмяТаблицы = ОбъектМодели.ИмяТаблицы();
	
	ТекстЗапроса = "DELETE FROM %1
		|WHERE %2 = @Идентификатор;";
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяТаблицы, ОбъектМодели.Идентификатор().ИмяКолонки);
	Лог.Отладка(
		"Удаление сущности с типом %1 и идентификатором %2:%3%4",
		ОбъектМодели.ТипСущности(),
		ОбъектМодели.ПолучитьЗначениеИдентификатора(Сущность),
		Символы.ПС,
		ТекстЗапроса
	);
	
	Запрос = Коннектор.КонструкторКоннектора.НовыйЗапрос(Коннектор.Соединение);
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Идентификатор", ОбъектМодели.ПолучитьЗначениеИдентификатора(Сущность));
	Запрос.ВыполнитьКоманду();

КонецПроцедуры

Функция ПолучитьОписаниеВнешнегоКлюча(ОбъектМодели, КолонкаМодели) Экспорт

	СтрокаВнешнийКлюч = "";
	
	Если КолонкаМодели.ТипКолонки = ТипыКолонок.Ссылка Тогда
		ОбъектМоделиСсылка = ОбъектМодели.МодельДанных().Получить(КолонкаМодели.ТипСсылки);
		
		СтрокаВнешнийКлюч = Символы.Таб + СтрШаблон(
			"FOREIGN KEY (%1) REFERENCES %2(%3),%4",
			КолонкаМодели.ИмяКолонки,
			ОбъектМоделиСсылка.ИмяТаблицы(),
			ОбъектМоделиСсылка.Идентификатор().ИмяКолонки,
			Символы.ПС
		);
	КонецЕсли;
	
	Возврат СтрокаВнешнийКлюч;

КонецФункции

// Создает таблицу в БД по данным модели.
//
// Параметры:
//   ОбъектМодели - ОбъектМодели - Объект, содержащий описание класса-сущности и настроек таблицы БД.
//
Процедура ИнициализироватьТаблицу(ОбъектМодели) Экспорт

	ИмяТаблицы = ОбъектМодели.ИмяТаблицы();
	
	ШаблонСозданияТаблицы = "CREATE TABLE IF NOT EXISTS %1 (
		|%2
		|);";
	
	ТекстЗапроса = ШаблонСозданияТаблицы;
	
	КолонкиТаблицы = ОбъектМодели.Колонки();
	Идентификатор = ОбъектМодели.Идентификатор();
	СтрокаОпределенийКолонок = "";
	СтрокаВнешнихКлючей = "";
	Для Каждого Колонка Из КолонкиТаблицы Цикл
				
		ТипКолонкиСУБД = Коннектор.ПолучитьТипКолонкиСУБД(ОбъектМодели, Колонка);
		ОписаниеВнешнегоКлюча = Коннектор.ПолучитьОписаниеВнешнегоКлюча(ОбъектМодели, Колонка);

		// Формирование строки-колонки
		СтрокаКолонка = Символы.Таб + Колонка.ИмяКолонки;
		
		СтрокаКолонка = СтрокаКолонка + " " + ТипКолонкиСУБД;
		Если Колонка.ИмяПоля = Идентификатор.ИмяПоля Тогда
			СтрокаКолонка = СтрокаКолонка + " PRIMARY KEY";
		КонецЕсли;
		Если Колонка.ГенерируемоеЗначение И Не ТипКолонкиСУБД = "serial" Тогда
			СтрокаКолонка = СтрокаКолонка + " AUTOINCREMENT";
		КонецЕсли;
		СтрокаКолонка = СтрокаКолонка + "," + Символы.ПС;
		
		СтрокаОпределенийКолонок = СтрокаОпределенийКолонок + СтрокаКолонка;
		Если ЗначениеЗаполнено(ОписаниеВнешнегоКлюча) Тогда
			СтрокаВнешнихКлючей = СтрокаВнешнихКлючей + ОписаниеВнешнегоКлюча;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаОпределенийКолонок = СтрокаОпределенийКолонок + СтрокаВнешнихКлючей;
	
	СтроковыеФункции.УдалитьПоследнийСимволВСтроке(СтрокаОпределенийКолонок, 2);
	
	ТекстЗапроса = СтрШаблон(ТекстЗапроса, ИмяТаблицы, СтрокаОпределенийКолонок);
	Лог.Отладка("Инициализация таблицы %1:%2%3", ИмяТаблицы, Символы.ПС, ТекстЗапроса);
	
	Запрос = Коннектор.КонструкторКоннектора.НовыйЗапрос(Коннектор.Соединение);
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.ВыполнитьКоманду();

КонецПроцедуры

Функция ПолучитьСтрокуУсловий(Запрос, Отбор) Экспорт

	СтрокаУсловий = "";

	Если Отбор = Неопределено Тогда
		Возврат СтрокаУсловий;
	КонецЕсли;
	
	Для сч = 0 По Отбор.ВГраница() Цикл
		ЭлементОтбора = Отбор[сч];
		ПредставлениеСчетчика = "п" + Формат(сч + 1, "ЧН=0; ЧГ=");
		Если ЗначениеЗаполнено(СтрокаУсловий) Тогда
			СтрокаУсловий = СтрокаУсловий + Символы.ПС + Символы.Таб + "AND ";
		КонецЕсли;
		СтрокаУсловий = СтрокаУсловий + СтрШаблон(
			"%1 %2 @%3", 
			ЭлементОтбора.ПутьКДанным, 
			ЭлементОтбора.ВидСравнения, 
			ПредставлениеСчетчика
		);
		Запрос.УстановитьПараметр(ПредставлениеСчетчика, ЭлементОтбора.Значение);
	КонецЦикла;

	Возврат СтрокаУсловий;

КонецФункции

Функция ПолучитьСтрокуСортировки(Сортировка)

	СтрокаСортировки = "";
	
	Если Сортировка = Неопределено Тогда
		Возврат СтрокаСортировки;
	КонецЕсли;

	Для сч = 0 По Сортировка.ВГраница() Цикл
		ЭлементСортировки = Сортировка[сч];
		
		Если ЗначениеЗаполнено(СтрокаСортировки) Тогда
			СтрокаСортировки = СтрокаСортировки + ", " + Символы.ПС + Символы.Таб;
		КонецЕсли;

		ИмяКолонки = ЭлементСортировки.ПутьКДанным;
		Направление = ?(ЭлементСортировки.НаправлениеСортировки = НаправлениеСортировки.Возр, "ASC", "DESC");

		СтрокаСортировки = СтрокаСортировки + СтрШаблон(
			"%1 %2", 
			ИмяКолонки, 
			Направление
		);
	КонецЦикла;

	Возврат СтрокаСортировки;

КонецФункции
